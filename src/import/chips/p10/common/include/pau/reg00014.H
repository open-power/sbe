/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00014.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00014_H_
#define __PAU_REG00014_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME0_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_ECC_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_ECC_CONFIG]

//>> GET_[AME_AME0_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_ECC_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_ECC_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG]

//>> PUT_[AME_AME0_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_ECC_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_ECC_CONFIG]


//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> CLEAR_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]
static inline bool GET_AME_AME0_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME0_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_ECC_CONFIG_ECC_SPARE]

//>> PREP_[AME_AME1_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_PMU_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_PMU_CONFIG1]

//>> GET_[AME_AME1_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_PMU_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_PMU_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG1]

//>> PUT_[AME_AME1_MISC_PMU_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_PMU_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_PMU_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_PMU_CONFIG1]


//>> SET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_0_SEL,
           AME_AME1_MISC_PMU_CONFIG1_0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_0_SEL,
           AME_AME1_MISC_PMU_CONFIG1_0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]

//>> GET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG1_0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG1_0_SEL,
           AME_AME1_MISC_PMU_CONFIG1_0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG1_0_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_1_SEL,
           AME_AME1_MISC_PMU_CONFIG1_1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_1_SEL,
           AME_AME1_MISC_PMU_CONFIG1_1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]

//>> GET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG1_1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG1_1_SEL,
           AME_AME1_MISC_PMU_CONFIG1_1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG1_1_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_2_SEL,
           AME_AME1_MISC_PMU_CONFIG1_2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_2_SEL,
           AME_AME1_MISC_PMU_CONFIG1_2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]

//>> GET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG1_2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG1_2_SEL,
           AME_AME1_MISC_PMU_CONFIG1_2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG1_2_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_3_SEL,
           AME_AME1_MISC_PMU_CONFIG1_3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]

//>> SET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG1_3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG1_3_SEL,
           AME_AME1_MISC_PMU_CONFIG1_3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]

//>> GET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG1_3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG1_3_SEL,
           AME_AME1_MISC_PMU_CONFIG1_3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG1_3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG1_3_SEL]

//>> PREP_[AME_AME2_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_AMM_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_AMM_CONFIG1]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_AMM_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_AMM_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1]

//>> PUT_[AME_AME2_MISC_AMM_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_AMM_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_AMM_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_AMM_CONFIG1]


//>> SET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME2_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME2_MISC_AMM_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_1_RESERVED,
           AME_AME2_MISC_AMM_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_1_RESERVED]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_WD_CRD]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SD_CRD]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> CLEAR_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]
static inline bool GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_ACT_TIMER]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.setBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> CLEAR_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.clearBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]
static inline bool GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.getBit<AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_VC2_CRD_SMR]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_AMM_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX,
           AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_AMM_CONFIG1_MRQ_SMR_MAX]

//>> PREP_[AME_AME2_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_CERR_RPT_HOLD]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_CERR_RPT_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD]

//>> PUT_[AME_AME2_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_CERR_RPT_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_CERR_RPT_HOLD]


//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_BREAK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]
static inline bool GET_AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_HOLD_XCT_CE]

//>> PREP_[AME_AME2_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_INFO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_CERR_RPT_INFO]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_INFO;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_CERR_RPT_INFO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO]

//>> PUT_[AME_AME2_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_CERR_RPT_INFO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_CERR_RPT_INFO]


//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_XCTS,
           AME_AME2_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_XCTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_XCTS,
           AME_AME2_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_XCTS,
           AME_AME2_MISC_CERR_RPT_INFO_XCTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_ERATS,
           AME_AME2_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_ERATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_ERATS,
           AME_AME2_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_ERATS,
           AME_AME2_MISC_CERR_RPT_INFO_ERATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_WBS,
           AME_AME2_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_WBS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_WBS,
           AME_AME2_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_WBS,
           AME_AME2_MISC_CERR_RPT_INFO_WBS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_AMES,
           AME_AME2_MISC_CERR_RPT_INFO_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]

//>> SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]

//>> GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_INFO_FIRST_CE]

//>> PREP_[AME_ATL_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_DEBUG_CONFIG0]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_DEBUG_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0]

//>> PUT_[AME_ATL_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_DEBUG_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_DEBUG_CONFIG0]


//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B0_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B1_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B2_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_B3_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_B3_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_B3_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> CLEAR_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline bool GET_AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> CLEAR_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline bool GET_AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> PREP_[CS_CTL_MISC_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_1_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_1_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_1_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_1_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_1_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_1_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_1_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_1_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_1_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_1_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_1_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_1_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_1_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_1_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_1_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_DEBUG0_CONFIG]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_CTL_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_DEBUG0_CONFIG]


//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD0]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD1]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD3]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD4]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD5]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD6]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD7]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD8]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD9]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_POD10]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQIN2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPIN]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_REQOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_CONFIG_DEBUG_MUX_ENABLE_RSPOUT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2,
           CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_RESERVED2]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG0_CONFIG_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM0_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_FIRST2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2]

//>> PUT_[CS_SM0_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_FIRST2]


//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST2_63]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE6]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE6));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE6]


//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE6));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> PREP_[CS_SM0_SNP_MISC_NDT0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_NDT0_BAR]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_NDT0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR]

//>> PUT_[CS_SM0_SNP_MISC_NDT0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_NDT0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_NDT0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_NDT0_BAR]


//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2,
           CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_NDT0_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]

//>> SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]

//>> GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT0_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT0_BAR_CONFIG_NDT0_BAR_SIZE]

//>> PREP_[CS_SM0_SNP_MISC_NDT1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_NDT1_BAR]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_NDT1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR]

//>> PUT_[CS_SM0_SNP_MISC_NDT1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_NDT1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_NDT1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_NDT1_BAR]


//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2,
           CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_NDT1_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]

//>> SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]

//>> GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT1_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT1_BAR_CONFIG_NDT1_BAR_SIZE]

//>> PREP_[CS_SM0_SNP_MISC_NDT2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_NDT2_BAR]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_NDT2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR]

//>> PUT_[CS_SM0_SNP_MISC_NDT2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_NDT2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_NDT2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_NDT2_BAR]


//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2,
           CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_NDT2_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]

//>> SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]

//>> GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT2_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT2_BAR_CONFIG_NDT2_BAR_SIZE]

//>> PREP_[CS_SM0_SNP_MISC_NDT3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_NDT3_BAR]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_NDT3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR]

//>> PUT_[CS_SM0_SNP_MISC_NDT3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_NDT3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_NDT3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_NDT3_BAR]


//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2,
           CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_NDT3_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]

//>> SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]

//>> GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT3_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT3_BAR_CONFIG_NDT3_BAR_SIZE]

//>> PREP_[CS_SM0_SNP_MISC_NDT4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_NDT4_BAR]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_NDT4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_NDT4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR]

//>> PUT_[CS_SM0_SNP_MISC_NDT4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_NDT4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_NDT4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_NDT4_BAR]


//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2,
           CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_NDT4_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]

//>> SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]

//>> GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_NDT4_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE,
           CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_NDT4_BAR_CONFIG_NDT4_BAR_SIZE]

//>> PREP_[CS_SM1_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_FIRST2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2]

//>> PUT_[CS_SM1_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_FIRST2]


//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST2_63]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MASK1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MASK1]


//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK1_STA_3]

//>> PREP_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_DEBUG4_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_DEBUG4_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_DEBUG4_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> PREP_[CS_SM1_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_XTIMER_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_XTIMER_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_XTIMER_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_XTIMER_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> PREP_[CS_SM1_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CERR_HOLD0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM1_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CERR_HOLD0]


//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]
static inline bool GET_CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_HOLD0_PBF_3]

//>> PREP_[CS_SM1_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CERR_MESSAGE0]

//>> GET_[CS_SM1_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_MESSAGE0]

//>> PUT_[CS_SM1_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CERR_MESSAGE0]


//>> SET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> SET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> GET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> PREP_[CS_SM2_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_FIRST2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2]

//>> PUT_[CS_SM2_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_FIRST2]


//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST2_63]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE3]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE3));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE3]


//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE3));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK1_SOURCE7_ARENA]

//>> PREP_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_FIRST2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST2;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2]

//>> PUT_[CS_SM3_MCP_MISC_CERR_FIRST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_FIRST2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_FIRST2]


//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST2_63]

//>> PREP_[CS_SM3_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CONFIG0]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0]

//>> PUT_[CS_SM3_MCP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CONFIG0]


//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_CLAIM_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FLUSH_UR]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_RP_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_NN_RN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_VG_NOT_SYS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_LN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_SKIP_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_SKIP_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_SKIP_G]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_MCRESP_OPT_WRP]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_USE_CL_DMA_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_USE_DMA_PR_W]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK,
           CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_INC_PRI_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MACH_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RXO_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_CORRENAB]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_INJECT_ENABLE2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_DMA_UPG]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_EVAPORATE_BY_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_SNARF_CPM]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DISABLE_INJECT]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_DCACHE_REPORTS_PHYSICAL]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_RSI_DISABLE_DATIN_FASTPATH]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_READ_GT_32]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FORBID_MMIO_ATOMIC]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CONTEXT_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_MA_DSA_OPT_FAIL_WAKE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_FAST_DIR_UPDATE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_MES_USE_GO_M]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_LCO_M_USE_MU]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_OPT_SNOOP_EX_LCO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_ENABLE_CP_ME]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_FENCE_ON_DERR_MMIO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_POISON_FENCE_L2]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0,
           CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG0_BRK4_IMP_TAGS_MODE_ENABLE]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC2_WREND]

//>> PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]

//>> PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1]


//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> PREP_[FIR_ACTION0_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION0_REG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_ACTION0_REG_2]

//>> GET_[FIR_ACTION0_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION0_REG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_2;
#endif
    return fapi2::getScom(i_target, FIR_ACTION0_REG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_ACTION0_REG_2]

//>> PUT_[FIR_ACTION0_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION0_REG_2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_2));
#endif
    return fapi2::putScom(i_target, FIR_ACTION0_REG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_ACTION0_REG_2]


//>> SET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_2_FIR_ACTION0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_2));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_2_FIR_ACTION0_2,
           FIR_ACTION0_REG_2_FIR_ACTION0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_ACTION0_REG_2_FIR_ACTION0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]

//>> SET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_2_FIR_ACTION0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_2));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_2_FIR_ACTION0_2,
           FIR_ACTION0_REG_2_FIR_ACTION0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_ACTION0_REG_2_FIR_ACTION0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]

//>> GET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]
static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION0_REG_2_FIR_ACTION0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_2));
#endif
    return i_data.extractToRight<FIR_ACTION0_REG_2_FIR_ACTION0_2,
           FIR_ACTION0_REG_2_FIR_ACTION0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_ACTION0_REG_2_FIR_ACTION0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_ACTION0_REG_2_FIR_ACTION0_2]

//>> PREP_[MISC_REGS_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_1_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_1_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_1_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_1_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_1_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_1_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_1_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_1_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_1_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_1_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_1_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_PE,
           MISC_REGS_BDF2PE_1_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_PE,
           MISC_REGS_BDF2PE_1_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_1_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_1_CONFIG_PE,
           MISC_REGS_BDF2PE_1_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_BDF,
           MISC_REGS_BDF2PE_1_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_1_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_1_CONFIG_BDF,
           MISC_REGS_BDF2PE_1_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_1_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_1_CONFIG_BDF,
           MISC_REGS_BDF2PE_1_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_1_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_1_CONFIG_BDF]

//>> PREP_[MISC_REGS_DEBUG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_DEBUG_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DEBUG_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_DEBUG_CONFIG]

//>> GET_[MISC_REGS_DEBUG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_DEBUG_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_DEBUG_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_DEBUG_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG]

//>> PUT_[MISC_REGS_DEBUG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_DEBUG_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_DEBUG_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_DEBUG_CONFIG]


//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE0]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE1]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE2]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE3]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE4]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE5]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE6]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE7]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE8]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE9]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS0BYTE10]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE0]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE1]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE2]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE3]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE4]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE5]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE6]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE7]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE8]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE9]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]

//>> SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]

//>> GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10,
           MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_MISC_DEBUG_CONFIG_BUS1BYTE10]

//>> SET_[MISC_REGS_DEBUG_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_RESERVED,
           MISC_REGS_DEBUG_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_RESERVED]

//>> SET_[MISC_REGS_DEBUG_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_RESERVED,
           MISC_REGS_DEBUG_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_RESERVED]

//>> GET_[MISC_REGS_DEBUG_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_RESERVED,
           MISC_REGS_DEBUG_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_RESERVED]

//>> SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> CLEAR_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> GET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> GET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]
static inline bool GET_MISC_REGS_DEBUG_CONFIG_ACT_DEBUG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_DEBUG_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_DEBUG_CONFIG_ACT_DEBUG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_DEBUG_CONFIG_ACT_DEBUG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_DEBUG_CONFIG_ACT_DEBUG]

//>> PREP_[MISC_REGS_INT_LOG_0_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE1]

//>> GET_[MISC_REGS_INT_LOG_0_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE1;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE1]

//>> PUT_[MISC_REGS_INT_LOG_0_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE1]


//>> SET_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE1_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE1_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE1_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE1_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE1_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_LVL,
           MISC_REGS_INT_LOG_0_PE1_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_LVL,
           MISC_REGS_INT_LOG_0_PE1_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE1_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE1_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE1_LVL,
           MISC_REGS_INT_LOG_0_PE1_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE1_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_RSVD0,
           MISC_REGS_INT_LOG_0_PE1_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE1_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE1_RSVD0,
           MISC_REGS_INT_LOG_0_PE1_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE1_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE1_RSVD0,
           MISC_REGS_INT_LOG_0_PE1_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE1_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE13(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE13;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE13]

//>> GET_[MISC_REGS_INT_LOG_0_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE13(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE13;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE13, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE13]

//>> PUT_[MISC_REGS_INT_LOG_0_PE13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE13(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE13, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE13]


//>> SET_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE13_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE13_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE13_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE13_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE13_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE13_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE13_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_LVL,
           MISC_REGS_INT_LOG_0_PE13_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_LVL,
           MISC_REGS_INT_LOG_0_PE13_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE13_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE13_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE13_LVL,
           MISC_REGS_INT_LOG_0_PE13_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE13_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_RSVD0,
           MISC_REGS_INT_LOG_0_PE13_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE13_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE13_RSVD0,
           MISC_REGS_INT_LOG_0_PE13_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE13_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE13));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE13_RSVD0,
           MISC_REGS_INT_LOG_0_PE13_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE13_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE13_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE1]

//>> GET_[MISC_REGS_INT_LOG_1_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE1;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1]

//>> PUT_[MISC_REGS_INT_LOG_1_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE1]


//>> SET_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE1_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE1_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE1_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE1_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE1_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE1_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_DETAIL,
           MISC_REGS_INT_LOG_1_PE1_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_DETAIL,
           MISC_REGS_INT_LOG_1_PE1_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE1_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE1_DETAIL,
           MISC_REGS_INT_LOG_1_PE1_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_CQ,
           MISC_REGS_INT_LOG_1_PE1_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_CQ,
           MISC_REGS_INT_LOG_1_PE1_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE1_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE1_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE1_CQ,
           MISC_REGS_INT_LOG_1_PE1_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_RSVD0,
           MISC_REGS_INT_LOG_1_PE1_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE1_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE1_RSVD0,
           MISC_REGS_INT_LOG_1_PE1_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE1_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE1_RSVD0,
           MISC_REGS_INT_LOG_1_PE1_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE1_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE1_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE15(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE15;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE15]

//>> GET_[MISC_REGS_INT_LOG_1_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE15(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE15;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE15, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15]

//>> PUT_[MISC_REGS_INT_LOG_1_PE15]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE15(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE15, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE15]


//>> SET_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE15_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE15_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE15_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE15_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE15_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE15_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_DETAIL,
           MISC_REGS_INT_LOG_1_PE15_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_DETAIL,
           MISC_REGS_INT_LOG_1_PE15_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE15_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE15_DETAIL,
           MISC_REGS_INT_LOG_1_PE15_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_CQ,
           MISC_REGS_INT_LOG_1_PE15_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_CQ,
           MISC_REGS_INT_LOG_1_PE15_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE15_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE15_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE15_CQ,
           MISC_REGS_INT_LOG_1_PE15_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_RSVD0,
           MISC_REGS_INT_LOG_1_PE15_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE15_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE15_RSVD0,
           MISC_REGS_INT_LOG_1_PE15_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE15_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE15));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE15_RSVD0,
           MISC_REGS_INT_LOG_1_PE15_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE15_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE15_RSVD0]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE1]

//>> GET_[MISC_REGS_PESTB_ADDR_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE1;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE1]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE1));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE1]


//>> SET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1,
           MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]

//>> SET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1,
           MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]

//>> GET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1,
           MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE1_DMA_STOPPED_STATE_ADDR_PE1]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE14(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE14;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE14]

//>> GET_[MISC_REGS_PESTB_ADDR_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE14(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE14;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE14, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE14]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE14(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE14));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE14, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE14]


//>> SET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14,
           MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]

//>> SET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14,
           MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]

//>> GET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14,
           MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE14_DMA_STOPPED_STATE_ADDR_PE14]

//>> PREP_[MISC_REGS_PESTB_DATA_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE14(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE14;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE14]

//>> GET_[MISC_REGS_PESTB_DATA_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE14(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE14;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE14, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE14]

//>> PUT_[MISC_REGS_PESTB_DATA_PE14]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE14(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE14, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE14]


//>> SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> GET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> GET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]
static inline bool GET_MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE14));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE14_DMA_STOPPED_STATE_PE14]

//>> PREP_[MISC_REGS_PESTB_DATA_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE2]

//>> GET_[MISC_REGS_PESTB_DATA_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE2;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE2]

//>> PUT_[MISC_REGS_PESTB_DATA_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE2]


//>> SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> GET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> GET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]
static inline bool GET_MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE2));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE2_DMA_STOPPED_STATE_PE2]

//>> PREP_[OTL0_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_C_ERR_RPT_MASK0]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_MASK0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_C_ERR_RPT_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0]

//>> PUT_[OTL0_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_C_ERR_RPT_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_C_ERR_RPT_MASK0]


//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_00]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_01]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_02]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_03]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_04]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_05]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_06]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_07]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_08]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_09]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_10]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_11]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_12]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_13]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_14]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_15]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_16]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_17]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_18]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_19]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_20]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_21]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_22]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_23]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_24]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_25]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_26]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_27]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_28]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_29]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_30]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_31]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_32]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_33]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_34]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_35]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_36]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_37]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_38]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_39]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_40]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_41]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_42]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_43]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_44]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_45]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_46]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_47]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_48]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_49]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_50]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_51]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_52]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_53]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_54]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_55]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_56]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_57]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_58]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_59]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_60]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_61]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_62]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_MASK0_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_MASK0_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> GET_[OTL0_MISC_C_ERR_RPT_MASK0_63]
static inline bool GET_OTL0_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_MASK0_63]

//>> PREP_[OTL0_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_TXI;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_ERROR_SIG_TXI]

//>> GET_[OTL0_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_TXI;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_ERROR_SIG_TXI, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_TXI]

//>> PUT_[OTL0_MISC_ERROR_SIG_TXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_ERROR_SIG_TXI(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_TXI));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_ERROR_SIG_TXI, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_ERROR_SIG_TXI]


//>> SET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_TXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> SET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_TXI));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> GET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_TXI));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE,
           OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_TXI_ERRSIGTXI_BAD_OPCODE]

//>> PREP_[OTL0_MISC_PMU_CONTROL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PMU_CONTROL1]

//>> GET_[OTL0_MISC_PMU_CONTROL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL1;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PMU_CONTROL1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1]

//>> PUT_[OTL0_MISC_PMU_CONTROL1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PMU_CONTROL1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PMU_CONTROL1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PMU_CONTROL1]


//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C01_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C01_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C01_OPCODEB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C01_OPCODEB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEA,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C23_OPCODEB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C23_OPCODEB,
           OTL0_MISC_PMU_CONTROL1_C23_OPCODEB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_OPCODEB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C23_OPCODEB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_DLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_DLA,
           OTL0_MISC_PMU_CONTROL1_C01_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_DLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_DLA,
           OTL0_MISC_PMU_CONTROL1_C01_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C01_DLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C01_DLA,
           OTL0_MISC_PMU_CONTROL1_C01_DLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C01_DLA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_DLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_DLB,
           OTL0_MISC_PMU_CONTROL1_C01_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C01_DLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C01_DLB,
           OTL0_MISC_PMU_CONTROL1_C01_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C01_DLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C01_DLB,
           OTL0_MISC_PMU_CONTROL1_C01_DLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C01_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C01_DLB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_DLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_DLA,
           OTL0_MISC_PMU_CONTROL1_C23_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_DLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_DLA,
           OTL0_MISC_PMU_CONTROL1_C23_DLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C23_DLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C23_DLA,
           OTL0_MISC_PMU_CONTROL1_C23_DLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C23_DLA]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_DLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_DLB,
           OTL0_MISC_PMU_CONTROL1_C23_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_C23_DLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_C23_DLB,
           OTL0_MISC_PMU_CONTROL1_C23_DLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]

//>> GET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_C23_DLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_C23_DLB,
           OTL0_MISC_PMU_CONTROL1_C23_DLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_C23_DLB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_C23_DLB]

//>> SET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]

//>> SET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]

//>> GET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY,
           OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_OPCODE_LATENCY]

//>> SET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_RESERVED1,
           OTL0_MISC_PMU_CONTROL1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]

//>> SET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL1_RESERVED1,
           OTL0_MISC_PMU_CONTROL1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]

//>> GET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL1));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL1_RESERVED1,
           OTL0_MISC_PMU_CONTROL1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL1_RESERVED1]

//>> PREP_[OTL0_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_DAR_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PSL_DAR_AN]

//>> GET_[OTL0_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_DAR_AN;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PSL_DAR_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PSL_DAR_AN]

//>> PUT_[OTL0_MISC_PSL_DAR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PSL_DAR_AN(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DAR_AN));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PSL_DAR_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PSL_DAR_AN]


//>> SET_[OTL0_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DAR_AN_CO_EA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DAR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DAR_AN_CO_EA,
           OTL0_MISC_PSL_DAR_AN_CO_EA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DAR_AN_CO_EA]

//>> SET_[OTL0_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DAR_AN_CO_EA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DAR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DAR_AN_CO_EA,
           OTL0_MISC_PSL_DAR_AN_CO_EA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DAR_AN_CO_EA]

//>> GET_[OTL0_MISC_PSL_DAR_AN_CO_EA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_DAR_AN_CO_EA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DAR_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_DAR_AN_CO_EA,
           OTL0_MISC_PSL_DAR_AN_CO_EA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_DAR_AN_CO_EA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DAR_AN_CO_EA]

//>> PREP_[OTL0_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TX_DL_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_TX_DL_CREDIT_STATUS]

//>> GET_[OTL0_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TX_DL_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_TX_DL_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_TX_DL_CREDIT_STATUS]

//>> PUT_[OTL0_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TX_DL_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_TX_DL_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_TX_DL_CREDIT_STATUS]


//>> SET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TX_DL_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> SET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TX_DL_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> GET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TX_DL_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> PREP_[OTL1_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TLX_CREDITS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_TLX_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TLX_CREDITS;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_TLX_CREDITS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS]

//>> PUT_[OTL1_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_TLX_CREDITS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_TLX_CREDITS]


//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL1_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL1_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL1_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> PREP_[OTL1_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_TX2]

//>> GET_[OTL1_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX2;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_TX2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2]

//>> PUT_[OTL1_MISC_CONFIG_TX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_TX2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_TX2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_TX2]


//>> SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> CLEAR_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> GET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_TX_SEND_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> GET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]
static inline bool GET_OTL1_MISC_CONFIG_TX2_TX_SEND_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX2_TX_SEND_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SEND_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_TX_SEND_EN]

//>> SET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_TX_SPARE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_TX_SPARE4,
           OTL1_MISC_CONFIG_TX2_TX_SPARE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]

//>> SET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_TX_SPARE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_TX_SPARE4,
           OTL1_MISC_CONFIG_TX2_TX_SPARE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]

//>> GET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_TX_SPARE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_TX_SPARE4,
           OTL1_MISC_CONFIG_TX2_TX_SPARE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_TX_SPARE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_TX_SPARE4]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC1_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC1_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC1_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC2_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC2_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC2_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC3_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC3_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC3_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH1,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH1]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC1_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC1_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC1_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC1_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC1_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC1_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC1_THRESH2]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC2_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC2_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC2_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC2_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC2_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC2_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC2_THRESH2]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC3_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]

//>> SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX2_VC3_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]

//>> GET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX2_VC3_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX2));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX2_VC3_THRESH2,
           OTL1_MISC_CONFIG_TX2_VC3_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX2_VC3_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX2_VC3_THRESH2]

//>> PREP_[OTL1_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_C_ERR_RPT_MASK0]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_MASK0;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_C_ERR_RPT_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0]

//>> PUT_[OTL1_MISC_C_ERR_RPT_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_C_ERR_RPT_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_C_ERR_RPT_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_C_ERR_RPT_MASK0]


//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_00]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_00]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_01]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_01]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_02]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_02]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_03]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_03]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_04]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_04]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_05]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_05]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_06]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_06]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_07]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_07]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_08]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_08]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_09]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_09]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_10]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_10]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_11]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_11]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_12]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_12]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_13]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_13]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_14]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_14]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_15]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_15]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_16]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_16]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_17]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_17]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_18]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_18]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_19]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_19]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_20]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_20]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_21]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_21]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_22]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_22]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_23]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_23]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_24]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_24]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_25]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_25]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_26]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_26]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_27]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_27]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_28]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_28]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_29]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_29]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_30]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_30]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_31]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_31]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_32]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_32]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_33]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_33]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_34]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_34]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_35]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_35]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_36]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_36]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_37]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_37]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_38]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_38]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_39]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_39]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_40]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_40]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_41]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_41]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_42]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_42]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_43]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_43]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_44]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_44]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_45]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_45]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_46]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_46]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_47]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_47]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_48]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_48]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_49]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_49]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_50]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_50]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_51]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_51]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_52]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_52]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_53]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_53]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_54]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_54]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_55]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_55]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_56]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_56]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_57]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_57]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_58]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_58]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_59]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_59]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_60]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_60]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_61]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_61]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_62]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_62]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_MASK0_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]

//>> SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_MASK0_63]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_MASK0_63]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_MASK0_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_63]

//>> GET_[OTL1_MISC_C_ERR_RPT_MASK0_63]
static inline bool GET_OTL1_MISC_C_ERR_RPT_MASK0_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_MASK0));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_MASK0_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_MASK0_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_MASK0_63]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
