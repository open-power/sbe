/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00009.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00009_H_
#define __PAU_REG00009_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME2_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_DEBUG_CONFIG0]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_DEBUG_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0]

//>> PUT_[AME_AME2_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_DEBUG_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_DEBUG_CONFIG0]


//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline bool GET_AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> PREP_[AME_ATL_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_CERR_RPT_HOLD]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_CERR_RPT_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD]

//>> PUT_[AME_ATL_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_CERR_RPT_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_CERR_RPT_HOLD]


//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_SUE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WBO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_INJB_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_DATO_CE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CREG_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_FLMAP_PE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_AUXT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LISB_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RSPT_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UCTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_CFH_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_SMF_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_LPTBL_UE]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_PBC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_UFL]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_EAC_TOUT]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_UEXP_XRS]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_RD_FAILED]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> GET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]
static inline bool GET_AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_HOLD_WR_FAILED]

//>> PREP_[AME_ATL_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_INFO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_CERR_RPT_INFO]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_INFO;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_CERR_RPT_INFO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO]

//>> PUT_[AME_ATL_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_CERR_RPT_INFO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_CERR_RPT_INFO]


//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_AMM]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS,
           AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_ECC_BANKS]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_TAG]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_SMID]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_RCODE]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]

//>> SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]

//>> GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART,
           AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_INFO_XFAIL_DPART]

//>> PREP_[AME_ATL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_CONFIG1]

//>> GET_[AME_ATL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1]

//>> PUT_[AME_ATL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_CONFIG1]


//>> SET_[AME_ATL_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_1_RESERVED,
           AME_ATL_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_1_RESERVED]

//>> SET_[AME_ATL_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_1_RESERVED,
           AME_ATL_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_1_RESERVED]

//>> GET_[AME_ATL_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_1_RESERVED,
           AME_ATL_MISC_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_1_RESERVED]

//>> SET_[AME_ATL_MISC_CONFIG1_LS_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_LS_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_LS_CRD,
           AME_ATL_MISC_CONFIG1_LS_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_LS_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_LS_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_LS_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_LS_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_LS_CRD,
           AME_ATL_MISC_CONFIG1_LS_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_LS_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_LS_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_LS_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_LS_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_LS_CRD,
           AME_ATL_MISC_CONFIG1_LS_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_LS_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_LS_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_VC2_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC2_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC2_CRD,
           AME_ATL_MISC_CONFIG1_VC2_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC2_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC2_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_VC2_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC2_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC2_CRD,
           AME_ATL_MISC_CONFIG1_VC2_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC2_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC2_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_VC2_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_VC2_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_VC2_CRD,
           AME_ATL_MISC_CONFIG1_VC2_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC2_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_VC2_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_INJ_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_INJ_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_INJ_CRD,
           AME_ATL_MISC_CONFIG1_INJ_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_INJ_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_INJ_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_INJ_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_INJ_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_INJ_CRD,
           AME_ATL_MISC_CONFIG1_INJ_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_INJ_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_INJ_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_INJ_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_INJ_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_INJ_CRD,
           AME_ATL_MISC_CONFIG1_INJ_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_INJ_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_INJ_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XLT_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XLT_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XLT_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XLT_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XLT_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XLT_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XLT_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XLT_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_XLT_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XLT_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XLT_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XLT_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_DMR_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_DMR_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_DMR_CRD,
           AME_ATL_MISC_CONFIG1_DMR_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_DMR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_DMR_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_DMR_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_DMR_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_DMR_CRD,
           AME_ATL_MISC_CONFIG1_DMR_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_DMR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_DMR_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_DMR_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_DMR_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_DMR_CRD,
           AME_ATL_MISC_CONFIG1_DMR_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_DMR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_DMR_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_AMM_UC_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_AMM_UC_CRD,
           AME_ATL_MISC_CONFIG1_AMM_UC_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_AMM_UC_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_AMM_UC_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_AMM_UC_CRD,
           AME_ATL_MISC_CONFIG1_AMM_UC_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_AMM_UC_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_AMM_UC_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_AMM_UC_CRD,
           AME_ATL_MISC_CONFIG1_AMM_UC_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_AMM_UC_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_AMM_UC_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_CPL_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_CPL_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_CPL_CRD,
           AME_ATL_MISC_CONFIG1_CPL_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CPL_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_CPL_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_CPL_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_CPL_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_CPL_CRD,
           AME_ATL_MISC_CONFIG1_CPL_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CPL_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_CPL_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_CPL_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_CPL_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_CPL_CRD,
           AME_ATL_MISC_CONFIG1_CPL_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CPL_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_CPL_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_RSO_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_RSO_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_RSO_CRD,
           AME_ATL_MISC_CONFIG1_RSO_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RSO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_RSO_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_RSO_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_RSO_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_RSO_CRD,
           AME_ATL_MISC_CONFIG1_RSO_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RSO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_RSO_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_RSO_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_RSO_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_RSO_CRD,
           AME_ATL_MISC_CONFIG1_RSO_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RSO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_RSO_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_RQO_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_RQO_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_RQO_CRD,
           AME_ATL_MISC_CONFIG1_RQO_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RQO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_RQO_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_RQO_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_RQO_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_RQO_CRD,
           AME_ATL_MISC_CONFIG1_RQO_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RQO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_RQO_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_RQO_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_RQO_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_RQO_CRD,
           AME_ATL_MISC_CONFIG1_RQO_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_RQO_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_RQO_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XSL_ITR_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XSL_ITR_CRD,
           AME_ATL_MISC_CONFIG1_XSL_ITR_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_ITR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XSL_ITR_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XSL_ITR_CRD,
           AME_ATL_MISC_CONFIG1_XSL_ITR_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_ITR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XSL_ITR_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XSL_ITR_CRD,
           AME_ATL_MISC_CONFIG1_XSL_ITR_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_ITR_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XSL_ITR_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XSL_XLT_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XSL_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XSL_XLT_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XSL_XLT_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XSL_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XSL_XLT_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]

//>> GET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XSL_XLT_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XSL_XLT_CRD,
           AME_ATL_MISC_CONFIG1_XSL_XLT_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XSL_XLT_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XSL_XLT_CRD]

//>> SET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_EAC_TLIM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_EAC_TLIM,
           AME_ATL_MISC_CONFIG1_EAC_TLIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_EAC_TLIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]

//>> SET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_EAC_TLIM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_EAC_TLIM,
           AME_ATL_MISC_CONFIG1_EAC_TLIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_EAC_TLIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]

//>> GET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_EAC_TLIM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_EAC_TLIM,
           AME_ATL_MISC_CONFIG1_EAC_TLIM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_EAC_TLIM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_EAC_TLIM]

//>> SET_[AME_ATL_MISC_CONFIG1_CF_HASH]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_CF_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_CF_HASH,
           AME_ATL_MISC_CONFIG1_CF_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CF_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_CF_HASH]

//>> SET_[AME_ATL_MISC_CONFIG1_CF_HASH]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_CF_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_CF_HASH,
           AME_ATL_MISC_CONFIG1_CF_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CF_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_CF_HASH]

//>> GET_[AME_ATL_MISC_CONFIG1_CF_HASH]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_CF_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_CF_HASH,
           AME_ATL_MISC_CONFIG1_CF_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_CF_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_CF_HASH]

//>> SET_[AME_ATL_MISC_CONFIG1_XL_HASH]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XL_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XL_HASH,
           AME_ATL_MISC_CONFIG1_XL_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XL_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XL_HASH]

//>> SET_[AME_ATL_MISC_CONFIG1_XL_HASH]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XL_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XL_HASH,
           AME_ATL_MISC_CONFIG1_XL_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XL_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XL_HASH]

//>> GET_[AME_ATL_MISC_CONFIG1_XL_HASH]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XL_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XL_HASH,
           AME_ATL_MISC_CONFIG1_XL_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XL_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XL_HASH]

//>> SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]

//>> SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]

//>> GET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH1]

//>> SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]

//>> SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]

//>> GET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2,
           AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_VC_PEND_THRESH2]

//>> SET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_COSM_UC_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_COSM_UC_WAIT,
           AME_ATL_MISC_CONFIG1_COSM_UC_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_COSM_UC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]

//>> SET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_COSM_UC_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_COSM_UC_WAIT,
           AME_ATL_MISC_CONFIG1_COSM_UC_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_COSM_UC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]

//>> GET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_COSM_UC_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_COSM_UC_WAIT,
           AME_ATL_MISC_CONFIG1_COSM_UC_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_COSM_UC_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_COSM_UC_WAIT]

//>> SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]

//>> SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]

//>> GET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_BASE]

//>> SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]

//>> SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]

//>> GET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE,
           AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_XRTY_WAIT_SCALE]

//>> SET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT,
           AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]

//>> SET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT,
           AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]

//>> GET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT,
           AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CONFIG1_WBI_PWR_WAIT]

//>> PREP_[CS_CTL_MISC_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_4_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_4_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_4_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_4_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_4_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_4_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_4_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_4_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_4_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_4_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_4_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_4_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_4_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_4_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_4_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_4_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_4_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_4_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_4_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_MESSAGE2]

//>> GET_[CS_CTL_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE2;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_MESSAGE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MESSAGE2]

//>> PUT_[CS_CTL_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE2));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_MESSAGE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_MESSAGE2]


//>> SET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> SET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> GET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> PREP_[CS_CTL_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CONFIG2]

//>> GET_[CS_CTL_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG2;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2]

//>> PUT_[CS_CTL_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CONFIG2]


//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_OCAPI_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_NVLINK_MODE]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_4]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK0_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK1_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK2_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK3_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_BRK4_OCAPI_AMO]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]
static inline bool GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK0]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]
static inline bool GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK1]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]
static inline bool GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK2]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]
static inline bool GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK3]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]
static inline bool GET_CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_WRITE_MEM_OS_BIT_BRK4]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE,
           CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE,
           CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]

//>> GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE,
           CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_SCOPE]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]
static inline bool GET_CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_GENID_SYNC_FORCE_RCMD0]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK0_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK1_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK2_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK3_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> GET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]
static inline bool GET_CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_BRK4_IMP_TAGS_MODE_ENABLE]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_CP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_GP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_SP_2CRED]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> GET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]
static inline bool GET_CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_ENABLE_PB_BACK2BACK]

//>> SET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_2_RESERVED1,
           CS_CTL_MISC_CONFIG2_2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]

//>> SET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_2_RESERVED1,
           CS_CTL_MISC_CONFIG2_2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]

//>> GET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_2_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_2_RESERVED1,
           CS_CTL_MISC_CONFIG2_2_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_2_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_2_RESERVED1]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_RATE_INC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_RATE_INC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_INC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_INC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_RATE_INC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_RATE_INC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_INC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_INC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]

//>> GET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_GENID_RATE_INC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_GENID_RATE_INC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_INC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_INC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_GENID_RATE_INC]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_RATE_DEC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_RATE_DEC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_DEC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_DEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]

//>> SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG2_GENID_RATE_DEC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG2_GENID_RATE_DEC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_DEC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_DEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]

//>> GET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG2_GENID_RATE_DEC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG2_GENID_RATE_DEC,
           CS_CTL_MISC_CONFIG2_GENID_RATE_DEC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG2_GENID_RATE_DEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG2_GENID_RATE_DEC]

//>> PREP_[CS_CTL_MISC_FENCE_CONTROL3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_FENCE_CONTROL3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_FENCE_CONTROL3]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_FENCE_CONTROL3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL3;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_FENCE_CONTROL3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL3]

//>> PUT_[CS_CTL_MISC_FENCE_CONTROL3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_FENCE_CONTROL3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_FENCE_CONTROL3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_FENCE_CONTROL3]


//>> SET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL3_3_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL3));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL3_CONTROL3_RESERVED]

//>> PREP_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_DIR_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_DIR_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_DIR_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MASK2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MASK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MASK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MASK2]


//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_12]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_13]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_14]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_15]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_16]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_17]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_18]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_19]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_20]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_21]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_22]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_23]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_24]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_25]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_26]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_27]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_28]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_29]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_30]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_31]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_32]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_33]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_34]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_35]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_36]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_37]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_38]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_39]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_40]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_41]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_42]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_43]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_44]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_45]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_46]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_47]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_48]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_49]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_50]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_51]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_52]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_53]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_54]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_55]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_56]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_57]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_58]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_59]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_60]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_61]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_62]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK2_63]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK2_63]

//>> PREP_[CS_SM0_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CONFIG1]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1]

//>> PUT_[CS_SM0_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CONFIG1]


//>> SET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM0_MCP_MISC_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG1_1_RESERVED]

//>> PREP_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline bool GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> PREP_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]

//>> GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]

//>> GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]

//>> GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]

//>> SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]

//>> GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM0_SNP_MISC_INHIBIT_CONFIG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_INHIBIT_CONFIG_3]

//>> PREP_[CS_SM0_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_LOW_WATER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_LOW_WATER]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_LOW_WATER;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_LOW_WATER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER]

//>> PUT_[CS_SM0_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_LOW_WATER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_LOW_WATER]


//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline bool GET_CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> PREP_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> CLEAR_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline bool GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> CLEAR_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline bool GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]

//>> PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3]


//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> PREP_[CS_SM1_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GENID_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GENID_BAR]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GENID_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GENID_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GENID_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GENID_BAR]


//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> PREP_[CS_SM1_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_MACHINE_ALLOC]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_MACHINE_ALLOC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC]

//>> PUT_[CS_SM1_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_MACHINE_ALLOC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_MACHINE_ALLOC]


//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> CLEAR_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline bool GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> CLEAR_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline bool GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> PREP_[CS_SM1_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_SM_STATUS]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS]

//>> PUT_[CS_SM1_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_SM_STATUS]


//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CREQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]
static inline bool GET_CS_SM1_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM1_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_SM_STATUS_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM1_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM1_SNP_MISC_SM_STATUS_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_SM_STATUS_RESERVED1]

//>> PREP_[CS_SM2_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_DIR_MISC_CONFIG0]

//>> GET_[CS_SM2_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM2_DIR_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_CONFIG0]

//>> PUT_[CS_SM2_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM2_DIR_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_DIR_MISC_CONFIG0]


//>> SET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> GET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM2_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM2_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]

//>> GET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM2_DIR_MISC_CONFIG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> CLEAR_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline bool GET_CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> PREP_[CS_SM2_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_HOLD0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM2_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_HOLD0]


//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]
static inline bool GET_CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_HOLD0_OCR_15]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE4]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE4));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE4]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE4));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> PREP_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> PREP_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> CLEAR_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline bool GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> CLEAR_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline bool GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> PREP_[DAT_MISC_REM0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_REM0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_REM0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_REM0]

//>> GET_[DAT_MISC_REM0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_REM0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_REM0;
#endif
    return fapi2::getScom(i_target, DAT_MISC_REM0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_REM0]

//>> PUT_[DAT_MISC_REM0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_REM0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return fapi2::putScom(i_target, DAT_MISC_REM0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_REM0]


//>> SET_[DAT_MISC_REM0_IBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_WSRC,
           DAT_MISC_REM0_IBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_WSRC]

//>> SET_[DAT_MISC_REM0_IBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_WSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_WSRC,
           DAT_MISC_REM0_IBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_WSRC]

//>> GET_[DAT_MISC_REM0_IBUF_WSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_IBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_IBUF_WSRC,
           DAT_MISC_REM0_IBUF_WSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_IBUF_WSRC]

//>> SET_[DAT_MISC_REM0_IBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_RSRC,
           DAT_MISC_REM0_IBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_RSRC]

//>> SET_[DAT_MISC_REM0_IBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_RSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_RSRC,
           DAT_MISC_REM0_IBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_RSRC]

//>> GET_[DAT_MISC_REM0_IBUF_RSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_IBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_IBUF_RSRC,
           DAT_MISC_REM0_IBUF_RSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_IBUF_RSRC]

//>> SET_[DAT_MISC_REM0_IBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_AIDX,
           DAT_MISC_REM0_IBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_AIDX]

//>> SET_[DAT_MISC_REM0_IBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_AIDX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_AIDX,
           DAT_MISC_REM0_IBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_AIDX]

//>> GET_[DAT_MISC_REM0_IBUF_AIDX]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_IBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_IBUF_AIDX,
           DAT_MISC_REM0_IBUF_AIDX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_IBUF_AIDX]

//>> SET_[DAT_MISC_REM0_IBUF_ABANK]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_ABANK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_ABANK,
           DAT_MISC_REM0_IBUF_ABANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_ABANK]

//>> SET_[DAT_MISC_REM0_IBUF_ABANK]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_IBUF_ABANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_IBUF_ABANK,
           DAT_MISC_REM0_IBUF_ABANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_IBUF_ABANK]

//>> GET_[DAT_MISC_REM0_IBUF_ABANK]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_IBUF_ABANK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_IBUF_ABANK,
           DAT_MISC_REM0_IBUF_ABANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_IBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_IBUF_ABANK]

//>> SET_[DAT_MISC_REM0_OBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_WSRC,
           DAT_MISC_REM0_OBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_WSRC]

//>> SET_[DAT_MISC_REM0_OBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_WSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_WSRC,
           DAT_MISC_REM0_OBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_WSRC]

//>> GET_[DAT_MISC_REM0_OBUF_WSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_OBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_OBUF_WSRC,
           DAT_MISC_REM0_OBUF_WSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_OBUF_WSRC]

//>> SET_[DAT_MISC_REM0_OBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_RSRC,
           DAT_MISC_REM0_OBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_RSRC]

//>> SET_[DAT_MISC_REM0_OBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_RSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_RSRC,
           DAT_MISC_REM0_OBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_RSRC]

//>> GET_[DAT_MISC_REM0_OBUF_RSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_OBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_OBUF_RSRC,
           DAT_MISC_REM0_OBUF_RSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_OBUF_RSRC]

//>> SET_[DAT_MISC_REM0_OBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_AIDX,
           DAT_MISC_REM0_OBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_AIDX]

//>> SET_[DAT_MISC_REM0_OBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_AIDX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_AIDX,
           DAT_MISC_REM0_OBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_AIDX]

//>> GET_[DAT_MISC_REM0_OBUF_AIDX]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_OBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_OBUF_AIDX,
           DAT_MISC_REM0_OBUF_AIDX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_OBUF_AIDX]

//>> SET_[DAT_MISC_REM0_OBUF_ABANK]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_ABANK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_ABANK,
           DAT_MISC_REM0_OBUF_ABANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_ABANK]

//>> SET_[DAT_MISC_REM0_OBUF_ABANK]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_OBUF_ABANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_OBUF_ABANK,
           DAT_MISC_REM0_OBUF_ABANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_OBUF_ABANK]

//>> GET_[DAT_MISC_REM0_OBUF_ABANK]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_OBUF_ABANK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_OBUF_ABANK,
           DAT_MISC_REM0_OBUF_ABANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_OBUF_ABANK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_OBUF_ABANK]

//>> SET_[DAT_MISC_REM0_BBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_WSRC,
           DAT_MISC_REM0_BBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_WSRC]

//>> SET_[DAT_MISC_REM0_BBUF_WSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_WSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_WSRC,
           DAT_MISC_REM0_BBUF_WSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_WSRC]

//>> GET_[DAT_MISC_REM0_BBUF_WSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_BBUF_WSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_BBUF_WSRC,
           DAT_MISC_REM0_BBUF_WSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_WSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_BBUF_WSRC]

//>> SET_[DAT_MISC_REM0_BBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_RSRC,
           DAT_MISC_REM0_BBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_RSRC]

//>> SET_[DAT_MISC_REM0_BBUF_RSRC]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_RSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_RSRC,
           DAT_MISC_REM0_BBUF_RSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_RSRC]

//>> GET_[DAT_MISC_REM0_BBUF_RSRC]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_BBUF_RSRC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_BBUF_RSRC,
           DAT_MISC_REM0_BBUF_RSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_RSRC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_BBUF_RSRC]

//>> SET_[DAT_MISC_REM0_BBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_AIDX,
           DAT_MISC_REM0_BBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_AIDX]

//>> SET_[DAT_MISC_REM0_BBUF_AIDX]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_REM0_BBUF_AIDX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return o_data.insertFromRight<DAT_MISC_REM0_BBUF_AIDX,
           DAT_MISC_REM0_BBUF_AIDX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_REM0_BBUF_AIDX]

//>> GET_[DAT_MISC_REM0_BBUF_AIDX]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_REM0_BBUF_AIDX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_REM0));
#endif
    return i_data.extractToRight<DAT_MISC_REM0_BBUF_AIDX,
           DAT_MISC_REM0_BBUF_AIDX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_REM0_BBUF_AIDX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_REM0_BBUF_AIDX]

//>> PREP_[DAT_MISC_SCRATCH1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_SCRATCH1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_SCRATCH1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_SCRATCH1]

//>> GET_[DAT_MISC_SCRATCH1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_SCRATCH1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_SCRATCH1;
#endif
    return fapi2::getScom(i_target, DAT_MISC_SCRATCH1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_SCRATCH1]

//>> PUT_[DAT_MISC_SCRATCH1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_SCRATCH1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH1));
#endif
    return fapi2::putScom(i_target, DAT_MISC_SCRATCH1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_SCRATCH1]


//>> SET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_SCRATCH1_SCRATCH1_IDIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH1));
#endif
    return o_data.insertFromRight<DAT_MISC_SCRATCH1_SCRATCH1_IDIAL,
           DAT_MISC_SCRATCH1_SCRATCH1_IDIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_SCRATCH1_SCRATCH1_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]

//>> SET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_SCRATCH1_SCRATCH1_IDIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH1));
#endif
    return o_data.insertFromRight<DAT_MISC_SCRATCH1_SCRATCH1_IDIAL,
           DAT_MISC_SCRATCH1_SCRATCH1_IDIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_SCRATCH1_SCRATCH1_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]

//>> GET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_SCRATCH1_SCRATCH1_IDIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_SCRATCH1));
#endif
    return i_data.extractToRight<DAT_MISC_SCRATCH1_SCRATCH1_IDIAL,
           DAT_MISC_SCRATCH1_SCRATCH1_IDIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_SCRATCH1_SCRATCH1_IDIAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_SCRATCH1_SCRATCH1_IDIAL]

//>> PREP_[FIR_ACTION1_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION1_REG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_ACTION1_REG_2]

//>> GET_[FIR_ACTION1_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION1_REG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_2;
#endif
    return fapi2::getScom(i_target, FIR_ACTION1_REG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_ACTION1_REG_2]

//>> PUT_[FIR_ACTION1_REG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION1_REG_2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_2));
#endif
    return fapi2::putScom(i_target, FIR_ACTION1_REG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_ACTION1_REG_2]


//>> SET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_2_FIR_ACTION1_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_2));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_2_FIR_ACTION1_2,
           FIR_ACTION1_REG_2_FIR_ACTION1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_ACTION1_REG_2_FIR_ACTION1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]

//>> SET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_2_FIR_ACTION1_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_2));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_2_FIR_ACTION1_2,
           FIR_ACTION1_REG_2_FIR_ACTION1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_ACTION1_REG_2_FIR_ACTION1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]

//>> GET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]
static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION1_REG_2_FIR_ACTION1_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_2));
#endif
    return i_data.extractToRight<FIR_ACTION1_REG_2_FIR_ACTION1_2,
           FIR_ACTION1_REG_2_FIR_ACTION1_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_ACTION1_REG_2_FIR_ACTION1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_ACTION1_REG_2_FIR_ACTION1_2]

//>> PREP_[FIR_MASK_REG_2_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_2_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_2_RW]

//>> GET_[FIR_MASK_REG_2_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_2_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_RW;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_2_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_2_RW]

//>> PUT_[FIR_MASK_REG_2_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_2_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_2_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_2_RW]

//>> PREP_[FIR_MASK_REG_2_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_2_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_2_WO_AND]

//>> GET_[FIR_MASK_REG_2_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_2_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_WO_AND;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_2_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_2_WO_AND]

//>> PUT_[FIR_MASK_REG_2_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_2_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_2_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_2_WO_AND]

//>> PREP_[FIR_MASK_REG_2_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_2_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_2_WO_OR]

//>> GET_[FIR_MASK_REG_2_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_2_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_2_WO_OR;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_2_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_2_WO_OR]

//>> PUT_[FIR_MASK_REG_2_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_2_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_2_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_2_WO_OR]


//>> SET_[FIR_MASK_REG_2_FIR_MASK_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_2_FIR_MASK_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_2_FIR_MASK_2,
           FIR_MASK_REG_2_FIR_MASK_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_MASK_REG_2_FIR_MASK_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_MASK_REG_2_FIR_MASK_2]

//>> SET_[FIR_MASK_REG_2_FIR_MASK_2]
static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_2_FIR_MASK_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_2_FIR_MASK_2,
           FIR_MASK_REG_2_FIR_MASK_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_MASK_REG_2_FIR_MASK_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_MASK_REG_2_FIR_MASK_2]

//>> GET_[FIR_MASK_REG_2_FIR_MASK_2]
static inline fapi2::buffer<uint64_t>& GET_FIR_MASK_REG_2_FIR_MASK_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_2_RW, FIR_MASK_REG_2_WO_AND, FIR_MASK_REG_2_WO_OR));
#endif
    return i_data.extractToRight<FIR_MASK_REG_2_FIR_MASK_2,
           FIR_MASK_REG_2_FIR_MASK_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_MASK_REG_2_FIR_MASK_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_MASK_REG_2_FIR_MASK_2]

//>> PREP_[MISC_FENCE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_FENCE_STATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_FENCE_STATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_FENCE_STATE]

//>> GET_[MISC_FENCE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_FENCE_STATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_FENCE_STATE;
#endif
    return fapi2::getScom(i_target, MISC_FENCE_STATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_FENCE_STATE]

//>> PUT_[MISC_FENCE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_FENCE_STATE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return fapi2::putScom(i_target, MISC_FENCE_STATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_FENCE_STATE]


//>> SET_[MISC_FENCE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_0]

//>> SET_[MISC_FENCE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_0]

//>> SET_[MISC_FENCE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.setBit<MISC_FENCE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_0]

//>> CLEAR_[MISC_FENCE_STATE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FENCE_STATE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.clearBit<MISC_FENCE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FENCE_STATE_0]

//>> GET_[MISC_FENCE_STATE_0]
static inline fapi2::buffer<uint64_t>& GET_MISC_FENCE_STATE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.extractToRight<MISC_FENCE_STATE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_0]

//>> GET_[MISC_FENCE_STATE_0]
static inline bool GET_MISC_FENCE_STATE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.getBit<MISC_FENCE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FENCE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_0]

//>> SET_[MISC_FENCE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_1]

//>> SET_[MISC_FENCE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_1]

//>> SET_[MISC_FENCE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.setBit<MISC_FENCE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_1]

//>> CLEAR_[MISC_FENCE_STATE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FENCE_STATE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.clearBit<MISC_FENCE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FENCE_STATE_1]

//>> GET_[MISC_FENCE_STATE_1]
static inline fapi2::buffer<uint64_t>& GET_MISC_FENCE_STATE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.extractToRight<MISC_FENCE_STATE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_1]

//>> GET_[MISC_FENCE_STATE_1]
static inline bool GET_MISC_FENCE_STATE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.getBit<MISC_FENCE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FENCE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_1]

//>> SET_[MISC_FENCE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_2]

//>> SET_[MISC_FENCE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_2]

//>> SET_[MISC_FENCE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.setBit<MISC_FENCE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_2]

//>> CLEAR_[MISC_FENCE_STATE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FENCE_STATE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.clearBit<MISC_FENCE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FENCE_STATE_2]

//>> GET_[MISC_FENCE_STATE_2]
static inline fapi2::buffer<uint64_t>& GET_MISC_FENCE_STATE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.extractToRight<MISC_FENCE_STATE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_2]

//>> GET_[MISC_FENCE_STATE_2]
static inline bool GET_MISC_FENCE_STATE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.getBit<MISC_FENCE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FENCE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_2]

//>> SET_[MISC_FENCE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_3]

//>> SET_[MISC_FENCE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_3]

//>> SET_[MISC_FENCE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.setBit<MISC_FENCE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_3]

//>> CLEAR_[MISC_FENCE_STATE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FENCE_STATE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.clearBit<MISC_FENCE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FENCE_STATE_3]

//>> GET_[MISC_FENCE_STATE_3]
static inline fapi2::buffer<uint64_t>& GET_MISC_FENCE_STATE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.extractToRight<MISC_FENCE_STATE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_3]

//>> GET_[MISC_FENCE_STATE_3]
static inline bool GET_MISC_FENCE_STATE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.getBit<MISC_FENCE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FENCE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_3]

//>> SET_[MISC_FENCE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_4]

//>> SET_[MISC_FENCE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.insertFromRight<MISC_FENCE_STATE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_4]

//>> SET_[MISC_FENCE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FENCE_STATE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.setBit<MISC_FENCE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FENCE_STATE_4]

//>> CLEAR_[MISC_FENCE_STATE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FENCE_STATE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return o_data.clearBit<MISC_FENCE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FENCE_STATE_4]

//>> GET_[MISC_FENCE_STATE_4]
static inline fapi2::buffer<uint64_t>& GET_MISC_FENCE_STATE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.extractToRight<MISC_FENCE_STATE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_4]

//>> GET_[MISC_FENCE_STATE_4]
static inline bool GET_MISC_FENCE_STATE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FENCE_STATE));
#endif
    return i_data.getBit<MISC_FENCE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FENCE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FENCE_STATE_4]

//>> PREP_[MISC_REGS_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_4_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_4_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_4_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_4_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_4_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_4_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_4_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_4_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_4_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_4_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_4_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_4_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_4_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_4_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_PE,
           MISC_REGS_BDF2PE_4_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_PE,
           MISC_REGS_BDF2PE_4_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_4_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_4_CONFIG_PE,
           MISC_REGS_BDF2PE_4_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_BDF,
           MISC_REGS_BDF2PE_4_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_4_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_4_CONFIG_BDF,
           MISC_REGS_BDF2PE_4_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_4_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_4_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_4_CONFIG_BDF,
           MISC_REGS_BDF2PE_4_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_4_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_4_CONFIG_BDF]

//>> PREP_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG1;
#endif
    return fapi2::getScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]

//>> PUT_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return fapi2::putScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1]


//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_5]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_6]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_7]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_8]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG1));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG1_9]

//>> PREP_[MISC_REGS_INT_LOG_0_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE8(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE8;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE8]

//>> GET_[MISC_REGS_INT_LOG_0_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE8(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE8;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE8, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE8]

//>> PUT_[MISC_REGS_INT_LOG_0_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE8(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE8, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE8]


//>> SET_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE8_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE8_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE8_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE8_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE8_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_LVL,
           MISC_REGS_INT_LOG_0_PE8_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_LVL,
           MISC_REGS_INT_LOG_0_PE8_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE8_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE8_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE8_LVL,
           MISC_REGS_INT_LOG_0_PE8_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE8_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_RSVD0,
           MISC_REGS_INT_LOG_0_PE8_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE8_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE8_RSVD0,
           MISC_REGS_INT_LOG_0_PE8_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE8_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE8_RSVD0,
           MISC_REGS_INT_LOG_0_PE8_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE8_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE8(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE8;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE8]

//>> GET_[MISC_REGS_INT_LOG_1_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE8(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE8;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE8, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8]

//>> PUT_[MISC_REGS_INT_LOG_1_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE8(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE8, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE8]


//>> SET_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE8_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE8_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE8_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE8_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE8_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE8_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_DETAIL,
           MISC_REGS_INT_LOG_1_PE8_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_DETAIL,
           MISC_REGS_INT_LOG_1_PE8_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE8_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE8_DETAIL,
           MISC_REGS_INT_LOG_1_PE8_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_CQ,
           MISC_REGS_INT_LOG_1_PE8_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_CQ,
           MISC_REGS_INT_LOG_1_PE8_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE8_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE8_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE8_CQ,
           MISC_REGS_INT_LOG_1_PE8_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_RSVD0,
           MISC_REGS_INT_LOG_1_PE8_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE8_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE8_RSVD0,
           MISC_REGS_INT_LOG_1_PE8_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE8_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE8_RSVD0,
           MISC_REGS_INT_LOG_1_PE8_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE8_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE8_RSVD0]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE8(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE8;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE8]

//>> GET_[MISC_REGS_PESTB_ADDR_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE8(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE8;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE8, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE8]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE8(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE8));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE8, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE8]


//>> SET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8,
           MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]

//>> SET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8,
           MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]

//>> GET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8,
           MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE8_DMA_STOPPED_STATE_ADDR_PE8]

//>> PREP_[OTL0_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_DEBUG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG_DEBUG1]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_DEBUG1;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG_DEBUG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1]

//>> PUT_[OTL0_MISC_CONFIG_DEBUG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG_DEBUG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG_DEBUG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG_DEBUG1]


//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE0,
           OTL0_MISC_CONFIG_DEBUG1_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE0,
           OTL0_MISC_CONFIG_DEBUG1_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE0,
           OTL0_MISC_CONFIG_DEBUG1_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE0]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE1,
           OTL0_MISC_CONFIG_DEBUG1_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE1,
           OTL0_MISC_CONFIG_DEBUG1_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE1,
           OTL0_MISC_CONFIG_DEBUG1_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE1]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE2,
           OTL0_MISC_CONFIG_DEBUG1_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE2,
           OTL0_MISC_CONFIG_DEBUG1_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE2,
           OTL0_MISC_CONFIG_DEBUG1_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE2]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE3,
           OTL0_MISC_CONFIG_DEBUG1_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE3,
           OTL0_MISC_CONFIG_DEBUG1_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE3,
           OTL0_MISC_CONFIG_DEBUG1_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE3]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE4,
           OTL0_MISC_CONFIG_DEBUG1_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE4,
           OTL0_MISC_CONFIG_DEBUG1_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE4,
           OTL0_MISC_CONFIG_DEBUG1_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE4]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE5,
           OTL0_MISC_CONFIG_DEBUG1_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE5,
           OTL0_MISC_CONFIG_DEBUG1_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE5,
           OTL0_MISC_CONFIG_DEBUG1_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE5]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE6,
           OTL0_MISC_CONFIG_DEBUG1_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE6,
           OTL0_MISC_CONFIG_DEBUG1_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE6,
           OTL0_MISC_CONFIG_DEBUG1_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE6]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE7,
           OTL0_MISC_CONFIG_DEBUG1_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE7,
           OTL0_MISC_CONFIG_DEBUG1_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE7,
           OTL0_MISC_CONFIG_DEBUG1_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE7]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE8,
           OTL0_MISC_CONFIG_DEBUG1_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE8,
           OTL0_MISC_CONFIG_DEBUG1_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE8,
           OTL0_MISC_CONFIG_DEBUG1_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE8]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE9,
           OTL0_MISC_CONFIG_DEBUG1_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE9,
           OTL0_MISC_CONFIG_DEBUG1_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE9,
           OTL0_MISC_CONFIG_DEBUG1_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE9]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE10,
           OTL0_MISC_CONFIG_DEBUG1_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_BYTE10,
           OTL0_MISC_CONFIG_DEBUG1_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_BYTE10,
           OTL0_MISC_CONFIG_DEBUG1_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_BYTE10]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_RESERVED,
           OTL0_MISC_CONFIG_DEBUG1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]

//>> SET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_DEBUG1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_DEBUG1_RESERVED,
           OTL0_MISC_CONFIG_DEBUG1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]

//>> GET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_DEBUG1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_DEBUG1));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_DEBUG1_RESERVED,
           OTL0_MISC_CONFIG_DEBUG1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_DEBUG1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_DEBUG1_RESERVED]

//>> PREP_[OTL0_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_DSISR_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PSL_DSISR_AN]

//>> GET_[OTL0_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_DSISR_AN;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PSL_DSISR_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN]

//>> PUT_[OTL0_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PSL_DSISR_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PSL_DSISR_AN]


//>> SET_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_TF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_TF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_TF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.setBit<OTL0_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> CLEAR_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.clearBit<OTL0_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> GET_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_DSISR_AN_TF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> GET_[OTL0_MISC_PSL_DSISR_AN_TF]
static inline bool GET_OTL0_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return i_data.getBit<OTL0_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_S(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.setBit<OTL0_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_S]

//>> CLEAR_[OTL0_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.clearBit<OTL0_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_PSL_DSISR_AN_S]

//>> GET_[OTL0_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_DSISR_AN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN_S]

//>> GET_[OTL0_MISC_PSL_DSISR_AN_S]
static inline bool GET_OTL0_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return i_data.getBit<OTL0_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_CO_RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_CO_RSP,
           OTL0_MISC_PSL_DSISR_AN_CO_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]

//>> SET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_DSISR_AN_CO_RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_DSISR_AN_CO_RSP,
           OTL0_MISC_PSL_DSISR_AN_CO_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]

//>> GET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_DSISR_AN_CO_RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_DSISR_AN_CO_RSP,
           OTL0_MISC_PSL_DSISR_AN_CO_RSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_DSISR_AN_CO_RSP]

//>> PREP_[OTL1_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_DEBUG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_DEBUG0]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_DEBUG0;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_DEBUG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0]

//>> PUT_[OTL1_MISC_CONFIG_DEBUG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_DEBUG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_DEBUG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_DEBUG0]


//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE0,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE0]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE1,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE1]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE2,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE2]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE3,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE3]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE4,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE4]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE5,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE5]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE6,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE6]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE7,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE7]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE8,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE8]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE9,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE9]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_BYTE10,
           OTL1_MISC_CONFIG_DEBUG0_0_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_BYTE10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_BYTE10]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL1_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL1_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_0_RESERVED,
           OTL1_MISC_CONFIG_DEBUG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_0_RESERVED]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> CLEAR_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> GET_[OTL1_MISC_CONFIG_DEBUG0_ACT]
static inline bool GET_OTL1_MISC_CONFIG_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_DEBUG0));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_DEBUG0_ACT]

//>> PREP_[OTL1_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX_DLC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_TX_DLC]

//>> GET_[OTL1_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX_DLC;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_TX_DLC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_DLC]

//>> PUT_[OTL1_MISC_CONFIG_TX_DLC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_TX_DLC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX_DLC));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_TX_DLC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_TX_DLC]


//>> SET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX_DLC));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> SET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX_DLC));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> GET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX_DLC));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS,
           OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_DLC_CONFIG_TX_DL_CREDITS]

//>> PREP_[OTL1_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_ERROR_SIG_RXI;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_ERROR_SIG_RXI]

//>> GET_[OTL1_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_ERROR_SIG_RXI;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_ERROR_SIG_RXI, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_RXI]

//>> PUT_[OTL1_MISC_ERROR_SIG_RXI]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_ERROR_SIG_RXI(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_ERROR_SIG_RXI, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_ERROR_SIG_RXI]


//>> SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.setBit<OTL1_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> CLEAR_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.clearBit<OTL1_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> GET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL1_MISC_ERROR_SIG_RXI_CAPTURED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> GET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]
static inline bool GET_OTL1_MISC_ERROR_SIG_RXI_CAPTURED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return i_data.getBit<OTL1_MISC_ERROR_SIG_RXI_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_RXI_CAPTURED]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_ENCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_ENCODE,
           OTL1_MISC_ERROR_SIG_RXI_ENCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_ENCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_ENCODE,
           OTL1_MISC_ERROR_SIG_RXI_ENCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]

//>> GET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_ERROR_SIG_RXI_ENCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL1_MISC_ERROR_SIG_RXI_ENCODE,
           OTL1_MISC_ERROR_SIG_RXI_ENCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_ENCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_RXI_ENCODE]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_SIGNATURE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL1_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> SET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_ERROR_SIG_RXI_SIGNATURE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return o_data.insertFromRight<OTL1_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL1_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> GET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_ERROR_SIG_RXI_SIGNATURE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_ERROR_SIG_RXI));
#endif
    return i_data.extractToRight<OTL1_MISC_ERROR_SIG_RXI_SIGNATURE,
           OTL1_MISC_ERROR_SIG_RXI_SIGNATURE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_ERROR_SIG_RXI_SIGNATURE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_ERROR_SIG_RXI_SIGNATURE]

//>> PREP_[OTL1_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_HAPPI_BAR0]

//>> GET_[OTL1_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR0;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_HAPPI_BAR0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0]

//>> PUT_[OTL1_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_HAPPI_BAR0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_HAPPI_BAR0]


//>> SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.setBit<OTL1_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> CLEAR_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.clearBit<OTL1_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR0_ENABLE]
static inline bool GET_OTL1_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return i_data.getBit<OTL1_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_ADDR,
           OTL1_MISC_HAPPI_BAR0_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_ADDR,
           OTL1_MISC_HAPPI_BAR0_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_ADDR]

//>> GET_[OTL1_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR0_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR0_ADDR,
           OTL1_MISC_HAPPI_BAR0_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_MASK,
           OTL1_MISC_HAPPI_BAR0_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_MASK,
           OTL1_MISC_HAPPI_BAR0_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_MASK]

//>> GET_[OTL1_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR0_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR0_MASK,
           OTL1_MISC_HAPPI_BAR0_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_SUB,
           OTL1_MISC_HAPPI_BAR0_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_SUB]

//>> SET_[OTL1_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR0_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR0_SUB,
           OTL1_MISC_HAPPI_BAR0_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR0_SUB]

//>> GET_[OTL1_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR0_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR0_SUB,
           OTL1_MISC_HAPPI_BAR0_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR0_SUB]

//>> PREP_[OTL1_MISC_TL_DCP_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TL_DCP_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_TL_DCP_CREDIT_STATUS]

//>> GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TL_DCP_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_TL_DCP_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS]

//>> PUT_[OTL1_MISC_TL_DCP_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_TL_DCP_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_TL_DCP_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_TL_DCP_CREDIT_STATUS]


//>> SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]

//>> SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]

//>> GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_0_COUNT]

//>> SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]

//>> SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]

//>> GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TL_DCP_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT,
           OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TL_DCP_CREDIT_STATUS_1_COUNT]

//>> PREP_[XSL_MAIN_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_PMU_CONTROL0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_PMU_CONTROL0]

//>> GET_[XSL_MAIN_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_PMU_CONTROL0;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_PMU_CONTROL0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0]

//>> PUT_[XSL_MAIN_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_PMU_CONTROL0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_PMU_CONTROL0]


//>> SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.setBit<XSL_MAIN_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> CLEAR_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.clearBit<XSL_MAIN_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_ENABLE]
static inline bool GET_XSL_MAIN_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.getBit<XSL_MAIN_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_ENABLE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_RESETMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.setBit<XSL_MAIN_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> CLEAR_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.clearBit<XSL_MAIN_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_RESETMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]
static inline bool GET_XSL_MAIN_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.getBit<XSL_MAIN_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_RESETMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.setBit<XSL_MAIN_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> CLEAR_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.clearBit<XSL_MAIN_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_FREEZEMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]
static inline bool GET_XSL_MAIN_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.getBit<XSL_MAIN_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_FREEZEMODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.setBit<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> CLEAR_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.clearBit<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]
static inline bool GET_XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.getBit<XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.setBit<XSL_MAIN_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> CLEAR_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.clearBit<XSL_MAIN_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]
static inline bool GET_XSL_MAIN_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.getBit<XSL_MAIN_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PMISC_MODE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_CASCADE,
           XSL_MAIN_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_CASCADE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_CASCADE,
           XSL_MAIN_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_CASCADE]

//>> GET_[XSL_MAIN_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_CASCADE,
           XSL_MAIN_PMU_CONTROL0_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_CASCADE]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C0,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C0,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C0,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C1,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C1,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C1,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C2,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C2,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C2,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C3,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C3,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]

//>> GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_PRESCALE_C3,
           XSL_MAIN_PMU_CONTROL0_PRESCALE_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C0,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C0,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]

//>> GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C0,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C1,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C1,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]

//>> GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C1,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C2,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C2,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]

//>> GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C2,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C3,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_OPERATION_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C3,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]

//>> GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_OPERATION_C3,
           XSL_MAIN_PMU_CONTROL0_OPERATION_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_OPERATION_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C0,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C0,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]

//>> GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C0,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C1,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C1,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]

//>> GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C1,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C1]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C2,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C2,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]

//>> GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C2,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C2]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C3,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_EVENTS_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C3,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]

//>> GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_EVENTS_C3,
           XSL_MAIN_PMU_CONTROL0_EVENTS_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_EVENTS_C3]

//>> SET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_RESERVED0,
           XSL_MAIN_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]

//>> SET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_CONTROL0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_CONTROL0_RESERVED0,
           XSL_MAIN_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]

//>> GET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_CONTROL0));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_CONTROL0_RESERVED0,
           XSL_MAIN_PMU_CONTROL0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_CONTROL0_RESERVED0]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_MULTI_AFU_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_OPENCAPI3_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG1_KILL_XLATE_TYPE_DIAL]

//>> PREP_[XTS_ATSD_HYP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP2]

//>> GET_[XTS_ATSD_HYP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP2;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP2]

//>> PUT_[XTS_ATSD_HYP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP2]


//>> SET_[XTS_ATSD_HYP2_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP2_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP2_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP2_MSRHV]

//>> SET_[XTS_ATSD_HYP2_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP2_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP2_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP2_MSRHV]

//>> SET_[XTS_ATSD_HYP2_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP2_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.setBit<XTS_ATSD_HYP2_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP2_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP2_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP2_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.clearBit<XTS_ATSD_HYP2_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP2_MSRHV]

//>> GET_[XTS_ATSD_HYP2_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP2_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP2_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP2_MSRHV]

//>> GET_[XTS_ATSD_HYP2_MSRHV]
static inline bool GET_XTS_ATSD_HYP2_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return i_data.getBit<XTS_ATSD_HYP2_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP2_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP2_MSRHV]

//>> SET_[XTS_ATSD_HYP2_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP2_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP2_LPARID,
           XTS_ATSD_HYP2_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP2_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP2_LPARID]

//>> SET_[XTS_ATSD_HYP2_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP2_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP2_LPARID,
           XTS_ATSD_HYP2_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP2_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP2_LPARID]

//>> GET_[XTS_ATSD_HYP2_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP2_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP2));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP2_LPARID,
           XTS_ATSD_HYP2_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP2_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP2_LPARID]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
