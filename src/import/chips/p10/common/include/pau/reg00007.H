/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00007.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00007_H_
#define __PAU_REG00007_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME1_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_CERR_RPT_HOLD]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_CERR_RPT_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD]

//>> PUT_[AME_AME1_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_CERR_RPT_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_CERR_RPT_HOLD]


//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_BREAK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]
static inline bool GET_AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_HOLD_XCT_CE]

//>> PREP_[AME_AME1_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_INFO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_CERR_RPT_INFO]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_INFO;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_CERR_RPT_INFO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO]

//>> PUT_[AME_AME1_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_CERR_RPT_INFO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_CERR_RPT_INFO]


//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_XCTS,
           AME_AME1_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_XCTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_XCTS,
           AME_AME1_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_XCTS,
           AME_AME1_MISC_CERR_RPT_INFO_XCTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_ERATS,
           AME_AME1_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_ERATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_ERATS,
           AME_AME1_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_ERATS,
           AME_AME1_MISC_CERR_RPT_INFO_ERATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_WBS,
           AME_AME1_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_WBS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_WBS,
           AME_AME1_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_WBS,
           AME_AME1_MISC_CERR_RPT_INFO_WBS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_AMES,
           AME_AME1_MISC_CERR_RPT_INFO_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]

//>> SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]

//>> GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_INFO_FIRST_CE]

//>> PREP_[AME_AME1_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_PMU_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_PMU_CONFIG2]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_PMU_CONFIG2;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_PMU_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2]

//>> PUT_[AME_AME1_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_PMU_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_PMU_CONFIG2]


//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME1_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PE_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME1_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME1_MISC_PMU_CONFIG2_PE_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_PE_TYPE]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME1_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_INST_CAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME1_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME1_MISC_PMU_CONFIG2_INST_CAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_INST_CAT]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PC0,
           AME_AME1_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PC0]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PC0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PC0,
           AME_AME1_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PC0]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_PC0,
           AME_AME1_MISC_PMU_CONFIG2_PC0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_PC0]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PC1,
           AME_AME1_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PC1]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PC1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PC1,
           AME_AME1_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PC1]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_PC1,
           AME_AME1_MISC_PMU_CONFIG2_PC1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_PC1]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PCR_S,
           AME_AME1_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PCR_S(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PCR_S,
           AME_AME1_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_PCR_S,
           AME_AME1_MISC_PMU_CONFIG2_PCR_S_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_PCR_S]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PCR_E,
           AME_AME1_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]

//>> SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_PMU_CONFIG2_PCR_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_PMU_CONFIG2_PCR_E,
           AME_AME1_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]

//>> GET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME1_MISC_PMU_CONFIG2_PCR_E,
           AME_AME1_MISC_PMU_CONFIG2_PCR_E_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_PMU_CONFIG2_PCR_E]

//>> PREP_[AME_ATL_MISC_ID_FENCE_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_ID_FENCE_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_ID_FENCE_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_ID_FENCE_STATUS]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_ID_FENCE_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_ID_FENCE_STATUS;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_ID_FENCE_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS]

//>> PUT_[AME_ATL_MISC_ID_FENCE_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_ID_FENCE_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_ID_FENCE_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_ID_FENCE_STATUS]


//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID,
           AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID,
           AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.extractToRight<AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID,
           AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_ATL_ID]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.setBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.clearBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.extractToRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]
static inline bool GET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.getBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_IN]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.setBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.clearBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.extractToRight<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]
static inline bool GET_AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.getBit<AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_FENCE_DONE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.setBit<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.clearBit<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.extractToRight<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]
static inline bool GET_AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.getBit<AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_DAT_IN_FENCE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE,
           AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]

//>> SET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE,
           AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]

//>> GET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_ID_FENCE_STATUS));
#endif
    return i_data.extractToRight<AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE,
           AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_ID_FENCE_STATUS_AMM_FENCE_DONE]

//>> PREP_[CS_CTL_MISC_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_5_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_5_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_5_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_5_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_5_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_5_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_5_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_5_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_5_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_5_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_5_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_5_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_5_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_5_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_5_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_5_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_5_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_5_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_5_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_MASK1]

//>> GET_[CS_CTL_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1]

//>> PUT_[CS_CTL_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_MASK1]


//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PEF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PEF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PEF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PEF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PEF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PEF_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PEF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_8]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_9]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_10]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_11]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_12]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_13]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_14]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_15]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_16]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_17]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_18]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> GET_[CS_CTL_MISC_CERR_MASK1_NLG_19]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_FWD_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_AUE_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBP_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBF_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_PBC_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_LDA_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_CTL_MISC_CERR_MASK1_STA_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK1_STA_3]

//>> PREP_[CS_CTL_MISC_SCOPE_PREDICT4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_SCOPE_PREDICT4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_SCOPE_PREDICT4]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_SCOPE_PREDICT4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_SCOPE_PREDICT4;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_SCOPE_PREDICT4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4]

//>> PUT_[CS_CTL_MISC_SCOPE_PREDICT4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_SCOPE_PREDICT4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_SCOPE_PREDICT4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_SCOPE_PREDICT4]


//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4RD_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED1]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_NN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_RN_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_FAIL_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_LN_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH,
           CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_G_INTV_THRESH]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_B4WR_VG_ENABLE]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.setBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return o_data.clearBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]
static inline bool GET_CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_SCOPE_PREDICT4));
#endif
    return i_data.getBit<CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_SCOPE_PREDICT4_4_RESERVED2]

//>> PREP_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_DIR_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_DIR_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_DIR_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM0_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_FIRST1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1]

//>> PUT_[CS_SM0_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_FIRST1]


//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST1_STA_3]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE5]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE5));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE5]


//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE5));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> PREP_[CS_SM1_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_FIRST1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1]

//>> PUT_[CS_SM1_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_FIRST1]


//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST1_STA_3]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MASK2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MASK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MASK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MASK2]


//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_20]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_21]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_22]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_23]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_24]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_25]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_26]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_27]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_28]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_29]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_30]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_31]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_32]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_33]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_34]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_35]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_36]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_37]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_38]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_39]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_40]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_41]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_42]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_43]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_44]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_45]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_46]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_47]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_48]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_49]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_50]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_51]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_52]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_53]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_54]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_55]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_56]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_57]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_58]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_59]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_60]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_61]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_62]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MASK2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_MASK2_63]
static inline bool GET_CS_SM1_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MASK2_63]

//>> PREP_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline bool GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG0]


//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG0_0_RESERVED0]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> PREP_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]

//>> GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]

//>> GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]

//>> GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]

//>> SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]

//>> GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM1_SNP_MISC_INHIBIT_CONFIG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_INHIBIT_CONFIG_3]

//>> PREP_[CS_SM2_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_FIRST1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1]

//>> PUT_[CS_SM2_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_FIRST1]


//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST1_STA_3]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE0]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE0]


//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK2_SOURCE7_ARENA]

//>> PREP_[CS_SM3_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_FIRST1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST1;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1]

//>> PUT_[CS_SM3_MCP_MISC_CERR_FIRST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_FIRST1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_FIRST1]


//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST1_STA_3]

//>> PREP_[CS_SM3_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_HOLD0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM3_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_HOLD0]


//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD0_OCR_15]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC1_WREND]

//>> PREP_[CS_SM3_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_GPU0_BAR]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GPU0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR]

//>> PUT_[CS_SM3_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GPU0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_GPU0_BAR]


//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_MODE,
           CS_SM3_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_MODE,
           CS_SM3_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_MODE,
           CS_SM3_SNP_MISC_GPU0_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]
static inline bool GET_CS_SM3_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU0_BAR_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_GPU1_BAR]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GPU1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR]

//>> PUT_[CS_SM3_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GPU1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_GPU1_BAR]


//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_MODE,
           CS_SM3_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_MODE,
           CS_SM3_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_MODE,
           CS_SM3_SNP_MISC_GPU1_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]
static inline bool GET_CS_SM3_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU1_BAR_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_GPU2_BAR]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GPU2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR]

//>> PUT_[CS_SM3_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GPU2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_GPU2_BAR]


//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_MODE,
           CS_SM3_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_MODE,
           CS_SM3_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_MODE,
           CS_SM3_SNP_MISC_GPU2_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]
static inline bool GET_CS_SM3_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU2_BAR_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_GPU3_BAR]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GPU3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR]

//>> PUT_[CS_SM3_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GPU3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_GPU3_BAR]


//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_MODE,
           CS_SM3_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_MODE,
           CS_SM3_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_MODE,
           CS_SM3_SNP_MISC_GPU3_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]
static inline bool GET_CS_SM3_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU3_BAR_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_GPU4_BAR]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_GPU4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR]

//>> PUT_[CS_SM3_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_GPU4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_GPU4_BAR]


//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_MODE,
           CS_SM3_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_MODE,
           CS_SM3_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_MODE,
           CS_SM3_SNP_MISC_GPU4_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]
static inline bool GET_CS_SM3_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_GPU4_BAR_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]

//>> PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2]


//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> PREP_[FIR_ACTION0_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION0_REG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_ACTION0_REG_1]

//>> GET_[FIR_ACTION0_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION0_REG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_1;
#endif
    return fapi2::getScom(i_target, FIR_ACTION0_REG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_ACTION0_REG_1]

//>> PUT_[FIR_ACTION0_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION0_REG_1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_1));
#endif
    return fapi2::putScom(i_target, FIR_ACTION0_REG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_ACTION0_REG_1]


//>> SET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_1_FIR_ACTION0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_1));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_1_FIR_ACTION0_1,
           FIR_ACTION0_REG_1_FIR_ACTION0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_ACTION0_REG_1_FIR_ACTION0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]

//>> SET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_1_FIR_ACTION0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_1));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_1_FIR_ACTION0_1,
           FIR_ACTION0_REG_1_FIR_ACTION0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_ACTION0_REG_1_FIR_ACTION0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]

//>> GET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]
static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION0_REG_1_FIR_ACTION0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_1));
#endif
    return i_data.extractToRight<FIR_ACTION0_REG_1_FIR_ACTION0_1,
           FIR_ACTION0_REG_1_FIR_ACTION0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_ACTION0_REG_1_FIR_ACTION0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_ACTION0_REG_1_FIR_ACTION0_1]

//>> PREP_[MISC_FREEZE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_FREEZE_STATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_FREEZE_STATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_FREEZE_STATE]

//>> GET_[MISC_FREEZE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_FREEZE_STATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_FREEZE_STATE;
#endif
    return fapi2::getScom(i_target, MISC_FREEZE_STATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_FREEZE_STATE]

//>> PUT_[MISC_FREEZE_STATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_FREEZE_STATE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return fapi2::putScom(i_target, MISC_FREEZE_STATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_FREEZE_STATE]


//>> SET_[MISC_FREEZE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_0]

//>> SET_[MISC_FREEZE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_0]

//>> SET_[MISC_FREEZE_STATE_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_0]

//>> CLEAR_[MISC_FREEZE_STATE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_0]

//>> GET_[MISC_FREEZE_STATE_0]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_0]

//>> GET_[MISC_FREEZE_STATE_0]
static inline bool GET_MISC_FREEZE_STATE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_0]

//>> SET_[MISC_FREEZE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_1]

//>> SET_[MISC_FREEZE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_1]

//>> SET_[MISC_FREEZE_STATE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_1]

//>> CLEAR_[MISC_FREEZE_STATE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_1]

//>> GET_[MISC_FREEZE_STATE_1]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_1]

//>> GET_[MISC_FREEZE_STATE_1]
static inline bool GET_MISC_FREEZE_STATE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_1]

//>> SET_[MISC_FREEZE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_2]

//>> SET_[MISC_FREEZE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_2]

//>> SET_[MISC_FREEZE_STATE_2]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_2]

//>> CLEAR_[MISC_FREEZE_STATE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_2]

//>> GET_[MISC_FREEZE_STATE_2]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_2]

//>> GET_[MISC_FREEZE_STATE_2]
static inline bool GET_MISC_FREEZE_STATE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_2]

//>> SET_[MISC_FREEZE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_3]

//>> SET_[MISC_FREEZE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_3]

//>> SET_[MISC_FREEZE_STATE_3]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_3]

//>> CLEAR_[MISC_FREEZE_STATE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_3]

//>> GET_[MISC_FREEZE_STATE_3]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_3]

//>> GET_[MISC_FREEZE_STATE_3]
static inline bool GET_MISC_FREEZE_STATE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_3]

//>> SET_[MISC_FREEZE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_4]

//>> SET_[MISC_FREEZE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_4]

//>> SET_[MISC_FREEZE_STATE_4]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_4]

//>> CLEAR_[MISC_FREEZE_STATE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_4]

//>> GET_[MISC_FREEZE_STATE_4]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_4]

//>> GET_[MISC_FREEZE_STATE_4]
static inline bool GET_MISC_FREEZE_STATE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_4]

//>> SET_[MISC_FREEZE_STATE_5]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_5]

//>> SET_[MISC_FREEZE_STATE_5]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_5]

//>> SET_[MISC_FREEZE_STATE_5]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_5]

//>> CLEAR_[MISC_FREEZE_STATE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_5]

//>> GET_[MISC_FREEZE_STATE_5]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_5]

//>> GET_[MISC_FREEZE_STATE_5]
static inline bool GET_MISC_FREEZE_STATE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_5]

//>> SET_[MISC_FREEZE_STATE_6]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_6]

//>> SET_[MISC_FREEZE_STATE_6]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_6]

//>> SET_[MISC_FREEZE_STATE_6]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_6]

//>> CLEAR_[MISC_FREEZE_STATE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_6]

//>> GET_[MISC_FREEZE_STATE_6]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_6]

//>> GET_[MISC_FREEZE_STATE_6]
static inline bool GET_MISC_FREEZE_STATE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_6]

//>> SET_[MISC_FREEZE_STATE_7]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_7]

//>> SET_[MISC_FREEZE_STATE_7]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_7]

//>> SET_[MISC_FREEZE_STATE_7]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_7]

//>> CLEAR_[MISC_FREEZE_STATE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_7]

//>> GET_[MISC_FREEZE_STATE_7]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_7]

//>> GET_[MISC_FREEZE_STATE_7]
static inline bool GET_MISC_FREEZE_STATE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_7]

//>> SET_[MISC_FREEZE_STATE_8]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_8]

//>> SET_[MISC_FREEZE_STATE_8]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_8]

//>> SET_[MISC_FREEZE_STATE_8]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_8]

//>> CLEAR_[MISC_FREEZE_STATE_8]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_8]

//>> GET_[MISC_FREEZE_STATE_8]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_8]

//>> GET_[MISC_FREEZE_STATE_8]
static inline bool GET_MISC_FREEZE_STATE_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_8]

//>> SET_[MISC_FREEZE_STATE_9]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_9]

//>> SET_[MISC_FREEZE_STATE_9]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_9]

//>> SET_[MISC_FREEZE_STATE_9]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_9]

//>> CLEAR_[MISC_FREEZE_STATE_9]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_9]

//>> GET_[MISC_FREEZE_STATE_9]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_9]

//>> GET_[MISC_FREEZE_STATE_9]
static inline bool GET_MISC_FREEZE_STATE_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_9]

//>> SET_[MISC_FREEZE_STATE_10]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_10]

//>> SET_[MISC_FREEZE_STATE_10]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_10]

//>> SET_[MISC_FREEZE_STATE_10]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_10]

//>> CLEAR_[MISC_FREEZE_STATE_10]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_10]

//>> GET_[MISC_FREEZE_STATE_10]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_10]

//>> GET_[MISC_FREEZE_STATE_10]
static inline bool GET_MISC_FREEZE_STATE_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_10]

//>> SET_[MISC_FREEZE_STATE_11]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_11]

//>> SET_[MISC_FREEZE_STATE_11]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_11]

//>> SET_[MISC_FREEZE_STATE_11]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_11]

//>> CLEAR_[MISC_FREEZE_STATE_11]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_11]

//>> GET_[MISC_FREEZE_STATE_11]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_11]

//>> GET_[MISC_FREEZE_STATE_11]
static inline bool GET_MISC_FREEZE_STATE_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_11]

//>> SET_[MISC_FREEZE_STATE_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_12]

//>> SET_[MISC_FREEZE_STATE_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_12]

//>> SET_[MISC_FREEZE_STATE_12]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_12]

//>> CLEAR_[MISC_FREEZE_STATE_12]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_12]

//>> GET_[MISC_FREEZE_STATE_12]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_12]

//>> GET_[MISC_FREEZE_STATE_12]
static inline bool GET_MISC_FREEZE_STATE_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_12]

//>> SET_[MISC_FREEZE_STATE_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_13]

//>> SET_[MISC_FREEZE_STATE_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_13]

//>> SET_[MISC_FREEZE_STATE_13]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_13]

//>> CLEAR_[MISC_FREEZE_STATE_13]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_13]

//>> GET_[MISC_FREEZE_STATE_13]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_13]

//>> GET_[MISC_FREEZE_STATE_13]
static inline bool GET_MISC_FREEZE_STATE_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_13]

//>> SET_[MISC_FREEZE_STATE_14]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_14]

//>> SET_[MISC_FREEZE_STATE_14]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_14]

//>> SET_[MISC_FREEZE_STATE_14]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_14]

//>> CLEAR_[MISC_FREEZE_STATE_14]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_14]

//>> GET_[MISC_FREEZE_STATE_14]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_14]

//>> GET_[MISC_FREEZE_STATE_14]
static inline bool GET_MISC_FREEZE_STATE_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_14]

//>> SET_[MISC_FREEZE_STATE_15]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_15]

//>> SET_[MISC_FREEZE_STATE_15]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.insertFromRight<MISC_FREEZE_STATE_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_15]

//>> SET_[MISC_FREEZE_STATE_15]
static inline fapi2::buffer<uint64_t>& SET_MISC_FREEZE_STATE_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.setBit<MISC_FREEZE_STATE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_FREEZE_STATE_15]

//>> CLEAR_[MISC_FREEZE_STATE_15]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_FREEZE_STATE_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return o_data.clearBit<MISC_FREEZE_STATE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_FREEZE_STATE_15]

//>> GET_[MISC_FREEZE_STATE_15]
static inline fapi2::buffer<uint64_t>& GET_MISC_FREEZE_STATE_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.extractToRight<MISC_FREEZE_STATE_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_15]

//>> GET_[MISC_FREEZE_STATE_15]
static inline bool GET_MISC_FREEZE_STATE_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_FREEZE_STATE));
#endif
    return i_data.getBit<MISC_FREEZE_STATE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_FREEZE_STATE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_FREEZE_STATE_15]

//>> PREP_[MISC_REGS_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_5_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_5_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_5_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_5_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_5_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_5_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_5_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_5_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_5_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_5_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_5_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_5_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_5_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_5_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_5_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_5_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_PE,
           MISC_REGS_BDF2PE_5_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_PE,
           MISC_REGS_BDF2PE_5_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_5_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_5_CONFIG_PE,
           MISC_REGS_BDF2PE_5_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_BDF,
           MISC_REGS_BDF2PE_5_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_5_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_5_CONFIG_BDF,
           MISC_REGS_BDF2PE_5_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_5_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_5_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_5_CONFIG_BDF,
           MISC_REGS_BDF2PE_5_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_5_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_5_CONFIG_BDF]

//>> PREP_[MISC_REGS_INT_LOG_0_PE10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE10(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE10;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE10]

//>> GET_[MISC_REGS_INT_LOG_0_PE10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE10(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE10;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE10, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE10]

//>> PUT_[MISC_REGS_INT_LOG_0_PE10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE10(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE10, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE10]


//>> SET_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE10_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE10_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE10_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE10_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE10_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE10_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE10_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE10_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE10_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_LVL,
           MISC_REGS_INT_LOG_0_PE10_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_LVL,
           MISC_REGS_INT_LOG_0_PE10_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE10_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE10_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE10_LVL,
           MISC_REGS_INT_LOG_0_PE10_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE10_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_RSVD0,
           MISC_REGS_INT_LOG_0_PE10_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE10_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE10_RSVD0,
           MISC_REGS_INT_LOG_0_PE10_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE10_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE10));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE10_RSVD0,
           MISC_REGS_INT_LOG_0_PE10_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE10_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE10_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE2]

//>> GET_[MISC_REGS_INT_LOG_0_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE2;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE2]

//>> PUT_[MISC_REGS_INT_LOG_0_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE2]


//>> SET_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE2_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE2_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE2_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE2_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE2_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_LVL,
           MISC_REGS_INT_LOG_0_PE2_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_LVL,
           MISC_REGS_INT_LOG_0_PE2_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE2_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE2_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE2_LVL,
           MISC_REGS_INT_LOG_0_PE2_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE2_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_RSVD0,
           MISC_REGS_INT_LOG_0_PE2_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE2_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE2_RSVD0,
           MISC_REGS_INT_LOG_0_PE2_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE2_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE2_RSVD0,
           MISC_REGS_INT_LOG_0_PE2_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE2_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE2]

//>> GET_[MISC_REGS_INT_LOG_1_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE2;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2]

//>> PUT_[MISC_REGS_INT_LOG_1_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE2]


//>> SET_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE2_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE2_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE2_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE2_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE2_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE2_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_DETAIL,
           MISC_REGS_INT_LOG_1_PE2_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_DETAIL,
           MISC_REGS_INT_LOG_1_PE2_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE2_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE2_DETAIL,
           MISC_REGS_INT_LOG_1_PE2_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_CQ,
           MISC_REGS_INT_LOG_1_PE2_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_CQ,
           MISC_REGS_INT_LOG_1_PE2_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE2_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE2_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE2_CQ,
           MISC_REGS_INT_LOG_1_PE2_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_RSVD0,
           MISC_REGS_INT_LOG_1_PE2_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE2_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE2_RSVD0,
           MISC_REGS_INT_LOG_1_PE2_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE2_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE2_RSVD0,
           MISC_REGS_INT_LOG_1_PE2_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE2_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE2_RSVD0]

//>> PREP_[MISC_REGS_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_MASK]

//>> GET_[MISC_REGS_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_MASK;
#endif
    return fapi2::getScom(i_target, MISC_REGS_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_MASK]

//>> PUT_[MISC_REGS_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_MASK(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_MASK));
#endif
    return fapi2::putScom(i_target, MISC_REGS_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_MASK]


//>> SET_[MISC_REGS_MASK_IDIAL_MISC_MASK]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_MASK_IDIAL_MISC_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_MASK));
#endif
    return o_data.insertFromRight<MISC_REGS_MASK_IDIAL_MISC_MASK,
           MISC_REGS_MASK_IDIAL_MISC_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_MASK_IDIAL_MISC_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_MASK_IDIAL_MISC_MASK]

//>> SET_[MISC_REGS_MASK_IDIAL_MISC_MASK]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_MASK_IDIAL_MISC_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_MASK));
#endif
    return o_data.insertFromRight<MISC_REGS_MASK_IDIAL_MISC_MASK,
           MISC_REGS_MASK_IDIAL_MISC_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_MASK_IDIAL_MISC_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_MASK_IDIAL_MISC_MASK]

//>> GET_[MISC_REGS_MASK_IDIAL_MISC_MASK]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_MASK_IDIAL_MISC_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_MASK));
#endif
    return i_data.extractToRight<MISC_REGS_MASK_IDIAL_MISC_MASK,
           MISC_REGS_MASK_IDIAL_MISC_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_MASK_IDIAL_MISC_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_MASK_IDIAL_MISC_MASK]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE2]

//>> GET_[MISC_REGS_PESTB_ADDR_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE2;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE2]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE2));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE2]


//>> SET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2,
           MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]

//>> SET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE2));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2,
           MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]

//>> GET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE2));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2,
           MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE2_DMA_STOPPED_STATE_ADDR_PE2]

//>> PREP_[MISC_REGS_PESTB_DATA_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE1]

//>> GET_[MISC_REGS_PESTB_DATA_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE1;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE1]

//>> PUT_[MISC_REGS_PESTB_DATA_PE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE1]


//>> SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> GET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> GET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]
static inline bool GET_MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE1));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE1_DMA_STOPPED_STATE_PE1]

//>> PREP_[OTL0_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PMU_CONTROL2]

//>> GET_[OTL0_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PMU_CONTROL2;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PMU_CONTROL2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2]

//>> PUT_[OTL0_MISC_PMU_CONTROL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PMU_CONTROL2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PMU_CONTROL2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PMU_CONTROL2]


//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C01_DCMASKDLB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLA]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB,
           OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_C23_DCMASKDLB]

//>> SET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> SET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> GET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY,
           OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_DCMASK_LATENCY]

//>> SET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_RESERVED2,
           OTL0_MISC_PMU_CONTROL2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]

//>> SET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PMU_CONTROL2_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return o_data.insertFromRight<OTL0_MISC_PMU_CONTROL2_RESERVED2,
           OTL0_MISC_PMU_CONTROL2_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]

//>> GET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PMU_CONTROL2_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PMU_CONTROL2));
#endif
    return i_data.extractToRight<OTL0_MISC_PMU_CONTROL2_RESERVED2,
           OTL0_MISC_PMU_CONTROL2_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PMU_CONTROL2_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PMU_CONTROL2_RESERVED2]

//>> PREP_[XTS_ATSD_HYP12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP12(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP12;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP12]

//>> GET_[XTS_ATSD_HYP12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP12(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP12;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP12, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP12]

//>> PUT_[XTS_ATSD_HYP12]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP12(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP12, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP12]


//>> SET_[XTS_ATSD_HYP12_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP12_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP12_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP12_MSRHV]

//>> SET_[XTS_ATSD_HYP12_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP12_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP12_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP12_MSRHV]

//>> SET_[XTS_ATSD_HYP12_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP12_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.setBit<XTS_ATSD_HYP12_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP12_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP12_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP12_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.clearBit<XTS_ATSD_HYP12_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP12_MSRHV]

//>> GET_[XTS_ATSD_HYP12_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP12_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP12_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP12_MSRHV]

//>> GET_[XTS_ATSD_HYP12_MSRHV]
static inline bool GET_XTS_ATSD_HYP12_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return i_data.getBit<XTS_ATSD_HYP12_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP12_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP12_MSRHV]

//>> SET_[XTS_ATSD_HYP12_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP12_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP12_LPARID,
           XTS_ATSD_HYP12_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP12_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP12_LPARID]

//>> SET_[XTS_ATSD_HYP12_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP12_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP12_LPARID,
           XTS_ATSD_HYP12_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP12_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP12_LPARID]

//>> GET_[XTS_ATSD_HYP12_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP12_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP12));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP12_LPARID,
           XTS_ATSD_HYP12_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP12_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP12_LPARID]

//>> PREP_[XTS_ATSD_HYP8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP8(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP8;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP8]

//>> GET_[XTS_ATSD_HYP8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP8(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP8;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP8, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP8]

//>> PUT_[XTS_ATSD_HYP8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP8(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP8, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP8]


//>> SET_[XTS_ATSD_HYP8_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP8_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP8_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP8_MSRHV]

//>> SET_[XTS_ATSD_HYP8_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP8_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP8_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP8_MSRHV]

//>> SET_[XTS_ATSD_HYP8_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP8_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.setBit<XTS_ATSD_HYP8_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP8_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP8_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP8_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.clearBit<XTS_ATSD_HYP8_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP8_MSRHV]

//>> GET_[XTS_ATSD_HYP8_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP8_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP8_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP8_MSRHV]

//>> GET_[XTS_ATSD_HYP8_MSRHV]
static inline bool GET_XTS_ATSD_HYP8_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return i_data.getBit<XTS_ATSD_HYP8_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP8_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP8_MSRHV]

//>> SET_[XTS_ATSD_HYP8_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP8_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP8_LPARID,
           XTS_ATSD_HYP8_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP8_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP8_LPARID]

//>> SET_[XTS_ATSD_HYP8_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP8_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP8_LPARID,
           XTS_ATSD_HYP8_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP8_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP8_LPARID]

//>> GET_[XTS_ATSD_HYP8_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP8_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP8));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP8_LPARID,
           XTS_ATSD_HYP8_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP8_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP8_LPARID]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
