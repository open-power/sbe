/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00001.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00001_H_
#define __PAU_REG00001_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME1_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_CERR_RPT_MASK]

//>> GET_[AME_AME1_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_CERR_RPT_MASK;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_CERR_RPT_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_MASK]

//>> PUT_[AME_AME1_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_MASK));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_CERR_RPT_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_CERR_RPT_MASK]


//>> SET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> SET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> GET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_CERR_RPT_MASK));
#endif
    return i_data.extractToRight<AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> PREP_[AME_ATL_MISC_CERR_RPT_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_CERR_RPT_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_CERR_RPT_CONTROL]

//>> GET_[AME_ATL_MISC_CERR_RPT_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_CERR_RPT_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_CERR_RPT_CONTROL;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_CERR_RPT_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_CONTROL]

//>> PUT_[AME_ATL_MISC_CERR_RPT_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_CERR_RPT_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_CONTROL));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_CERR_RPT_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_CERR_RPT_CONTROL]


//>> SET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_CONTROL));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK,
           AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]

//>> SET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_CONTROL));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK,
           AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]

//>> GET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_CERR_RPT_CONTROL));
#endif
    return i_data.extractToRight<AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK,
           AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_CERR_RPT_CONTROL_CONFIG_CERR_RPT_MASK]

//>> PREP_[AME_ATL_MISC_PMU_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_PMU_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_PMU_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_PMU_CONFIG]

//>> GET_[AME_ATL_MISC_PMU_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_PMU_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_PMU_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_PMU_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG]

//>> PUT_[AME_ATL_MISC_PMU_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_PMU_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_PMU_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_PMU_CONFIG]


//>> SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_PMU_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> CLEAR_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_PMU_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_PMU_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]
static inline bool GET_AME_ATL_MISC_PMU_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_PMU_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_ENABLE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_RESETMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_PMU_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> CLEAR_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_PMU_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_PMU_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_RESETMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]
static inline bool GET_AME_ATL_MISC_PMU_CONFIG_RESETMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_PMU_CONFIG_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_RESETMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> CLEAR_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]
static inline bool GET_AME_ATL_MISC_PMU_CONFIG_FREEZEMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_PMU_CONFIG_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_FREEZEMODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> CLEAR_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]
static inline bool GET_AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_DISABLE_PMISC]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> CLEAR_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]
static inline bool GET_AME_ATL_MISC_PMU_CONFIG_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_PMU_CONFIG_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PMISC_MODE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_CASCADE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_CASCADE,
           AME_ATL_MISC_PMU_CONFIG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_CASCADE,
           AME_ATL_MISC_PMU_CONFIG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_CASCADE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_CASCADE,
           AME_ATL_MISC_PMU_CONFIG_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_CASCADE]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3,
           AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_PRESCALE_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C0,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C0,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C0,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C1,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C1,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C1,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C2,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C2,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C2,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C3,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C3,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_OPERATION_C3,
           AME_ATL_MISC_PMU_CONFIG_OPERATION_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_OPERATION_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_OPERATION_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C0,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C0,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C0,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C1,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C1,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C1,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C1]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C2,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C2,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C2,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C2]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C3,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C3,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_EVENTS_C3,
           AME_ATL_MISC_PMU_CONFIG_EVENTS_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_EVENTS_C3]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_RESERVED0,
           AME_ATL_MISC_PMU_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]

//>> SET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_PMU_CONFIG_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_PMU_CONFIG_RESERVED0,
           AME_ATL_MISC_PMU_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]

//>> GET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_PMU_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_PMU_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_PMU_CONFIG_RESERVED0,
           AME_ATL_MISC_PMU_CONFIG_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_PMU_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_PMU_CONFIG_RESERVED0]

//>> PREP_[AME_ATL_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_TEST_CERR_RPT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_TEST_CERR_RPT]

//>> GET_[AME_ATL_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_TEST_CERR_RPT;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_TEST_CERR_RPT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_TEST_CERR_RPT]

//>> PUT_[AME_ATL_MISC_TEST_CERR_RPT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_TEST_CERR_RPT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_TEST_CERR_RPT));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_TEST_CERR_RPT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_TEST_CERR_RPT]


//>> SET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> SET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_TEST_CERR_RPT));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> GET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_TEST_CERR_RPT));
#endif
    return i_data.extractToRight<AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL,
           AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_TEST_CERR_RPT_TEST_CERR_BITSEL]

//>> PREP_[CS_CTL_MISC_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_3_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_3_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_3_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_3_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_3_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_3_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_3_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_3_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_3_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_3_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_3_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_3_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_3_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_3_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_3_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_3_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_3_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_3_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_3_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_HOLD0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0]

//>> PUT_[CS_CTL_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_HOLD0]


//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_NVF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_NVF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_NVF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_NVF_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_NVF_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_NVF_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_REG_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_DUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_DUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_DUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_DUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_DUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_DUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_DUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_DUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_DUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_DUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_DUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_DUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD0_DUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD0_DUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD0_DUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD0_DUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD0_DUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD0_DUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD0_DUE_3]

//>> PREP_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG1]


//>> SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG1_1_RESERVED2]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> PREP_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_DIR_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_DIR_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_DIR_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_DIR_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_DIR_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_DIR_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_DIR_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE5;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE5]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE5));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE5]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE5));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE5));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5,
           CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE5_CERR_MESSAGE_BITS5]

//>> PREP_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]

//>> GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_PERF_ADDR_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]

//>> PUT_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_PERF_ADDR_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG]


//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> PREP_[CS_SM2_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CONFIG2]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CONFIG2;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2]

//>> PUT_[CS_SM2_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CONFIG2]


//>> SET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM2_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG2_2_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM2_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM2_MCP_MISC_CONFIG2_2_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG2_2_RESERVED]

//>> PREP_[CS_SM2_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_SM_STATUS]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS]

//>> PUT_[CS_SM2_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_SM_STATUS]


//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBGP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBGP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FENCE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM2_MCP_MISC_SM_STATUS_FENCE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBLN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_PBLN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_PBNNG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B0REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B0DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B1REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B1DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B2REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B2DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B3REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B3DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B4REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B4DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_REPLAY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_PBRSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B0RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B1RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B2RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B3RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_B4RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_XARSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_XARSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FREE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_FREE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_SACOLL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]
static inline bool GET_CS_SM2_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_MRBCP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM2_MCP_MISC_SM_STATUS_MRBCP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM2_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_SM_STATUS_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM2_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]

//>> GET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM2_MCP_MISC_SM_STATUS_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_SM_STATUS_RESERVED2]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC4_WREND]

//>> PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE2;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]

//>> PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2]


//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_ABLE_16_23]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY16]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY17]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY18]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY19]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY20]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY21]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY22]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE2));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE2_TRY23]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MASK1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MASK1]


//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK1_STA_3]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE0]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE0]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> PREP_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> PREP_[CS_SM3_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CERR_HOLD0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM3_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CERR_HOLD0]


//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_HOLD0_PBF_3]

//>> PREP_[MISC_REGS_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_3_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_3_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_3_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_3_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_3_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_3_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_3_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_3_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_3_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_3_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_3_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_3_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_3_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_3_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_PE,
           MISC_REGS_BDF2PE_3_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_PE,
           MISC_REGS_BDF2PE_3_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_3_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_3_CONFIG_PE,
           MISC_REGS_BDF2PE_3_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_BDF,
           MISC_REGS_BDF2PE_3_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_3_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_3_CONFIG_BDF,
           MISC_REGS_BDF2PE_3_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_3_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_3_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_3_CONFIG_BDF,
           MISC_REGS_BDF2PE_3_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_3_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_3_CONFIG_BDF]

//>> PREP_[MISC_REGS_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_HOLD]

//>> GET_[MISC_REGS_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_HOLD;
#endif
    return fapi2::getScom(i_target, MISC_REGS_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_HOLD]

//>> PUT_[MISC_REGS_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_HOLD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return fapi2::putScom(i_target, MISC_REGS_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_HOLD]


//>> SET_[MISC_REGS_HOLD_NDL0_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL0_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_STALL]

//>> SET_[MISC_REGS_HOLD_NDL0_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL0_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_STALL]

//>> SET_[MISC_REGS_HOLD_NDL0_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_NDL0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_STALL]

//>> CLEAR_[MISC_REGS_HOLD_NDL0_STALL]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_NDL0_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_NDL0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_NDL0_STALL]

//>> GET_[MISC_REGS_HOLD_NDL0_STALL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_NDL0_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_NDL0_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL0_STALL]

//>> GET_[MISC_REGS_HOLD_NDL0_STALL]
static inline bool GET_MISC_REGS_HOLD_NDL0_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_NDL0_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL0_STALL]

//>> SET_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL0_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> SET_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL0_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> SET_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL0_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_NDL0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> CLEAR_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_NDL0_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_NDL0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> GET_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_NDL0_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_NDL0_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> GET_[MISC_REGS_HOLD_NDL0_NOSTALL]
static inline bool GET_MISC_REGS_HOLD_NDL0_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_NDL0_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_NDL0_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL0_NOSTALL]

//>> SET_[MISC_REGS_HOLD_NDL1_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_STALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL1_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_STALL]

//>> SET_[MISC_REGS_HOLD_NDL1_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_STALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL1_STALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_STALL]

//>> SET_[MISC_REGS_HOLD_NDL1_STALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_NDL1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_STALL]

//>> CLEAR_[MISC_REGS_HOLD_NDL1_STALL]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_NDL1_STALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_NDL1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_NDL1_STALL]

//>> GET_[MISC_REGS_HOLD_NDL1_STALL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_NDL1_STALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_NDL1_STALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL1_STALL]

//>> GET_[MISC_REGS_HOLD_NDL1_STALL]
static inline bool GET_MISC_REGS_HOLD_NDL1_STALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_NDL1_STALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_STALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL1_STALL]

//>> SET_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL1_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> SET_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_NOSTALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_NDL1_NOSTALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> SET_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_NDL1_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_NDL1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> CLEAR_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_NDL1_NOSTALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_NDL1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> GET_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_NDL1_NOSTALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_NDL1_NOSTALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> GET_[MISC_REGS_HOLD_NDL1_NOSTALL]
static inline bool GET_MISC_REGS_HOLD_NDL1_NOSTALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_NDL1_NOSTALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_NDL1_NOSTALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_NDL1_NOSTALL]

//>> SET_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_RING_ERRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_RING_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_RING_ERRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_RING_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_RING_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_MISC_RING_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> CLEAR_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_MISC_RING_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_MISC_RING_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_MISC_RING_ERRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_MISC_RING_ERRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_RING_ERRP]
static inline bool GET_MISC_REGS_HOLD_MISC_RING_ERRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_MISC_RING_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_RING_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_RING_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_IBAR_ERRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_IBAR_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_IBAR_ERRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_IBAR_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_IBAR_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_MISC_IBAR_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> CLEAR_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_MISC_IBAR_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_MISC_IBAR_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_MISC_IBAR_ERRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_MISC_IBAR_ERRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]
static inline bool GET_MISC_REGS_HOLD_MISC_IBAR_ERRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_MISC_IBAR_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_IBAR_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_IBAR_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> CLEAR_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]
static inline bool GET_MISC_REGS_HOLD_MISC_SCOMDAA_ERRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_MISC_SCOMDAA_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_SCOMDAA_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_SCOMDAA_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_CNTL_ERRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_CNTL_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_CNTL_ERRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_MISC_CNTL_ERRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_MISC_CNTL_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_MISC_CNTL_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> CLEAR_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_MISC_CNTL_ERRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_MISC_CNTL_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_MISC_CNTL_ERRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_MISC_CNTL_ERRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> GET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]
static inline bool GET_MISC_REGS_HOLD_MISC_CNTL_ERRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_MISC_CNTL_ERRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_MISC_CNTL_ERRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_MISC_CNTL_ERRP]

//>> SET_[MISC_REGS_HOLD_RX00_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX00_FAULT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX00_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX00_FAULT]

//>> SET_[MISC_REGS_HOLD_RX00_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX00_FAULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX00_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX00_FAULT]

//>> SET_[MISC_REGS_HOLD_RX00_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX00_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_RX00_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX00_FAULT]

//>> CLEAR_[MISC_REGS_HOLD_RX00_FAULT]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_RX00_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_RX00_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_RX00_FAULT]

//>> GET_[MISC_REGS_HOLD_RX00_FAULT]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_RX00_FAULT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_RX00_FAULT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX00_FAULT]

//>> GET_[MISC_REGS_HOLD_RX00_FAULT]
static inline bool GET_MISC_REGS_HOLD_RX00_FAULT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_RX00_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_RX00_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX00_FAULT]

//>> SET_[MISC_REGS_HOLD_RX01_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX01_FAULT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX01_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX01_FAULT]

//>> SET_[MISC_REGS_HOLD_RX01_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX01_FAULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX01_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX01_FAULT]

//>> SET_[MISC_REGS_HOLD_RX01_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX01_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_RX01_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX01_FAULT]

//>> CLEAR_[MISC_REGS_HOLD_RX01_FAULT]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_RX01_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_RX01_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_RX01_FAULT]

//>> GET_[MISC_REGS_HOLD_RX01_FAULT]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_RX01_FAULT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_RX01_FAULT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX01_FAULT]

//>> GET_[MISC_REGS_HOLD_RX01_FAULT]
static inline bool GET_MISC_REGS_HOLD_RX01_FAULT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_RX01_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_RX01_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX01_FAULT]

//>> SET_[MISC_REGS_HOLD_RX20_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX20_FAULT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX20_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX20_FAULT]

//>> SET_[MISC_REGS_HOLD_RX20_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX20_FAULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.insertFromRight<MISC_REGS_HOLD_RX20_FAULT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX20_FAULT]

//>> SET_[MISC_REGS_HOLD_RX20_FAULT]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_HOLD_RX20_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.setBit<MISC_REGS_HOLD_RX20_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_HOLD_RX20_FAULT]

//>> CLEAR_[MISC_REGS_HOLD_RX20_FAULT]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_HOLD_RX20_FAULT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return o_data.clearBit<MISC_REGS_HOLD_RX20_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_HOLD_RX20_FAULT]

//>> GET_[MISC_REGS_HOLD_RX20_FAULT]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_HOLD_RX20_FAULT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.extractToRight<MISC_REGS_HOLD_RX20_FAULT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX20_FAULT]

//>> GET_[MISC_REGS_HOLD_RX20_FAULT]
static inline bool GET_MISC_REGS_HOLD_RX20_FAULT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_HOLD));
#endif
    return i_data.getBit<MISC_REGS_HOLD_RX20_FAULT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_HOLD_RX20_FAULT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_HOLD_RX20_FAULT]

//>> PREP_[OTL0_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG3]

//>> GET_[OTL0_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG3;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG3]

//>> PUT_[OTL0_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG3]


//>> SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG3_ENABLE_HAPPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG3_ENABLE_HAPPI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG3_ENABLE_HAPPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> CLEAR_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> GET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG3_ENABLE_HAPPI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> GET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]
static inline bool GET_OTL0_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG3_CONFIG3_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG3_CONFIG3_SPARE,
           OTL0_MISC_CONFIG3_CONFIG3_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]

//>> SET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG3_CONFIG3_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG3_CONFIG3_SPARE,
           OTL0_MISC_CONFIG3_CONFIG3_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]

//>> GET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG3_CONFIG3_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG3));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG3_CONFIG3_SPARE,
           OTL0_MISC_CONFIG3_CONFIG3_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG3_CONFIG3_SPARE]

//>> PREP_[OTL0_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_HAPPI_BAR3]

//>> GET_[OTL0_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR3;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_HAPPI_BAR3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3]

//>> PUT_[OTL0_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_HAPPI_BAR3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_HAPPI_BAR3]


//>> SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.setBit<OTL0_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> CLEAR_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.clearBit<OTL0_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR3_ENABLE]
static inline bool GET_OTL0_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return i_data.getBit<OTL0_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_ADDR,
           OTL0_MISC_HAPPI_BAR3_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_ADDR,
           OTL0_MISC_HAPPI_BAR3_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_ADDR]

//>> GET_[OTL0_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR3_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR3_ADDR,
           OTL0_MISC_HAPPI_BAR3_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_MASK,
           OTL0_MISC_HAPPI_BAR3_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_MASK,
           OTL0_MISC_HAPPI_BAR3_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_MASK]

//>> GET_[OTL0_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR3_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR3_MASK,
           OTL0_MISC_HAPPI_BAR3_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_SUB,
           OTL0_MISC_HAPPI_BAR3_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_SUB]

//>> SET_[OTL0_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR3_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR3_SUB,
           OTL0_MISC_HAPPI_BAR3_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR3_SUB]

//>> GET_[OTL0_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR3_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR3_SUB,
           OTL0_MISC_HAPPI_BAR3_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR3_SUB]

//>> PREP_[OTL0_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_PEHANDLE_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_PSL_PEHANDLE_AN]

//>> GET_[OTL0_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_PSL_PEHANDLE_AN;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_PSL_PEHANDLE_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_PSL_PEHANDLE_AN]

//>> PUT_[OTL0_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_PSL_PEHANDLE_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_PSL_PEHANDLE_AN]


//>> SET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> SET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> GET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> SET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> SET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> GET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_PSL_PEHANDLE_AN));
#endif
    return i_data.extractToRight<OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> PREP_[OTL1_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_PEHANDLE_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PSL_PEHANDLE_AN]

//>> GET_[OTL1_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_PEHANDLE_AN;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PSL_PEHANDLE_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PSL_PEHANDLE_AN]

//>> PUT_[OTL1_MISC_PSL_PEHANDLE_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PSL_PEHANDLE_AN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PSL_PEHANDLE_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PSL_PEHANDLE_AN]


//>> SET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> SET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> GET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG,
           OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_PEHANDLE_AN_AFUTAG]

//>> SET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> SET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> GET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_PEHANDLE_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE,
           OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_PEHANDLE_AN_PE_HANDLE]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_ADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A2_VALID_DIAL]

//>> PREP_[XSL_MAIN_WRAP_ERROR_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_WRAP_ERROR_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERROR_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_WRAP_ERROR_0]

//>> GET_[XSL_MAIN_WRAP_ERROR_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_WRAP_ERROR_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERROR_0;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_WRAP_ERROR_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0]

//>> PUT_[XSL_MAIN_WRAP_ERROR_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_WRAP_ERROR_0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_WRAP_ERROR_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_WRAP_ERROR_0]


//>> SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_MMIO_INVALIDATE_REQ_WHILE_1_INPROG]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_0]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_ITAG_PORT_1]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_RD_PEE_COMPLETION]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_UNEXPECTED_CO_RESP]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_XLAT_REQ_WHILE_SPAP_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_INVALID_PEE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_INVALID_PEE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_INVALID_PEE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_INVALID_PEE]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_BLOOM_FILTER_ARY_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRANSLATION_REQ_TO_INVALID_TA]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TA_XLATE_RELEASE_TO_INVALID]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_FITA_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT0_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT1_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT2_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_ERT3_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TADB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_LO_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_MID_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_COSB_HI_SBE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_TRKR1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA0_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_IDBA1_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_FITA_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX0B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX1B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX2B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3A_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_0));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_0_CTX3B_UE_ERROR]

//>> PREP_[XTS_ATSD_HYP6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP6]

//>> GET_[XTS_ATSD_HYP6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP6;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP6]

//>> PUT_[XTS_ATSD_HYP6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP6(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP6]


//>> SET_[XTS_ATSD_HYP6_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP6_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP6_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP6_MSRHV]

//>> SET_[XTS_ATSD_HYP6_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP6_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP6_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP6_MSRHV]

//>> SET_[XTS_ATSD_HYP6_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP6_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.setBit<XTS_ATSD_HYP6_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP6_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP6_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP6_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.clearBit<XTS_ATSD_HYP6_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP6_MSRHV]

//>> GET_[XTS_ATSD_HYP6_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP6_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP6_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP6_MSRHV]

//>> GET_[XTS_ATSD_HYP6_MSRHV]
static inline bool GET_XTS_ATSD_HYP6_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return i_data.getBit<XTS_ATSD_HYP6_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP6_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP6_MSRHV]

//>> SET_[XTS_ATSD_HYP6_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP6_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP6_LPARID,
           XTS_ATSD_HYP6_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP6_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP6_LPARID]

//>> SET_[XTS_ATSD_HYP6_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP6_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP6_LPARID,
           XTS_ATSD_HYP6_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP6_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP6_LPARID]

//>> GET_[XTS_ATSD_HYP6_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP6_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP6));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP6_LPARID,
           XTS_ATSD_HYP6_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP6_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP6_LPARID]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
